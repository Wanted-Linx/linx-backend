// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogfeedback"
)

// ProjectLogFeedbackCreate is the builder for creating a ProjectLogFeedback entity.
type ProjectLogFeedbackCreate struct {
	config
	mutation *ProjectLogFeedbackMutation
	hooks    []Hook
}

// SetAuthor sets the "author" field.
func (plfc *ProjectLogFeedbackCreate) SetAuthor(s string) *ProjectLogFeedbackCreate {
	plfc.mutation.SetAuthor(s)
	return plfc
}

// SetContent sets the "content" field.
func (plfc *ProjectLogFeedbackCreate) SetContent(s string) *ProjectLogFeedbackCreate {
	plfc.mutation.SetContent(s)
	return plfc
}

// SetProjectLogID sets the "project_log" edge to the ProjectLog entity by ID.
func (plfc *ProjectLogFeedbackCreate) SetProjectLogID(id int) *ProjectLogFeedbackCreate {
	plfc.mutation.SetProjectLogID(id)
	return plfc
}

// SetProjectLog sets the "project_log" edge to the ProjectLog entity.
func (plfc *ProjectLogFeedbackCreate) SetProjectLog(p *ProjectLog) *ProjectLogFeedbackCreate {
	return plfc.SetProjectLogID(p.ID)
}

// Mutation returns the ProjectLogFeedbackMutation object of the builder.
func (plfc *ProjectLogFeedbackCreate) Mutation() *ProjectLogFeedbackMutation {
	return plfc.mutation
}

// Save creates the ProjectLogFeedback in the database.
func (plfc *ProjectLogFeedbackCreate) Save(ctx context.Context) (*ProjectLogFeedback, error) {
	var (
		err  error
		node *ProjectLogFeedback
	)
	if len(plfc.hooks) == 0 {
		if err = plfc.check(); err != nil {
			return nil, err
		}
		node, err = plfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectLogFeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = plfc.check(); err != nil {
				return nil, err
			}
			plfc.mutation = mutation
			if node, err = plfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(plfc.hooks) - 1; i >= 0; i-- {
			if plfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = plfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, plfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (plfc *ProjectLogFeedbackCreate) SaveX(ctx context.Context) *ProjectLogFeedback {
	v, err := plfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plfc *ProjectLogFeedbackCreate) Exec(ctx context.Context) error {
	_, err := plfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plfc *ProjectLogFeedbackCreate) ExecX(ctx context.Context) {
	if err := plfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plfc *ProjectLogFeedbackCreate) check() error {
	if _, ok := plfc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "author"`)}
	}
	if _, ok := plfc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "content"`)}
	}
	if _, ok := plfc.mutation.ProjectLogID(); !ok {
		return &ValidationError{Name: "project_log", err: errors.New("ent: missing required edge \"project_log\"")}
	}
	return nil
}

func (plfc *ProjectLogFeedbackCreate) sqlSave(ctx context.Context) (*ProjectLogFeedback, error) {
	_node, _spec := plfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (plfc *ProjectLogFeedbackCreate) createSpec() (*ProjectLogFeedback, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectLogFeedback{config: plfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: projectlogfeedback.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectlogfeedback.FieldID,
			},
		}
	)
	if value, ok := plfc.mutation.Author(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlogfeedback.FieldAuthor,
		})
		_node.Author = value
	}
	if value, ok := plfc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlogfeedback.FieldContent,
		})
		_node.Content = value
	}
	if nodes := plfc.mutation.ProjectLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlogfeedback.ProjectLogTable,
			Columns: []string{projectlogfeedback.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_log_project_log_feedback = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectLogFeedbackCreateBulk is the builder for creating many ProjectLogFeedback entities in bulk.
type ProjectLogFeedbackCreateBulk struct {
	config
	builders []*ProjectLogFeedbackCreate
}

// Save creates the ProjectLogFeedback entities in the database.
func (plfcb *ProjectLogFeedbackCreateBulk) Save(ctx context.Context) ([]*ProjectLogFeedback, error) {
	specs := make([]*sqlgraph.CreateSpec, len(plfcb.builders))
	nodes := make([]*ProjectLogFeedback, len(plfcb.builders))
	mutators := make([]Mutator, len(plfcb.builders))
	for i := range plfcb.builders {
		func(i int, root context.Context) {
			builder := plfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectLogFeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plfcb *ProjectLogFeedbackCreateBulk) SaveX(ctx context.Context) []*ProjectLogFeedback {
	v, err := plfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plfcb *ProjectLogFeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := plfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plfcb *ProjectLogFeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := plfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
