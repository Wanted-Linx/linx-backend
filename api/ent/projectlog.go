// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectclub"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
)

// ProjectLog is the model entity for the ProjectLog schema.
type ProjectLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate string `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate string `json:"end_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectLogQuery when eager-loading is set.
	Edges                    ProjectLogEdges `json:"edges"`
	project_project_log      *int
	project_club_project_log *int
}

// ProjectLogEdges holds the relations/edges for other nodes in the graph.
type ProjectLogEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// ProjectClub holds the value of the project_club edge.
	ProjectClub *ProjectClub `json:"project_club,omitempty"`
	// ProjectLogParticipant holds the value of the project_log_participant edge.
	ProjectLogParticipant []*ProjectLogParticipant `json:"project_log_participant,omitempty"`
	// ProjectLogFeedback holds the value of the project_log_feedback edge.
	ProjectLogFeedback []*ProjectLogFeedback `json:"project_log_feedback,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectLogEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// ProjectClubOrErr returns the ProjectClub value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectLogEdges) ProjectClubOrErr() (*ProjectClub, error) {
	if e.loadedTypes[1] {
		if e.ProjectClub == nil {
			// The edge project_club was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: projectclub.Label}
		}
		return e.ProjectClub, nil
	}
	return nil, &NotLoadedError{edge: "project_club"}
}

// ProjectLogParticipantOrErr returns the ProjectLogParticipant value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectLogEdges) ProjectLogParticipantOrErr() ([]*ProjectLogParticipant, error) {
	if e.loadedTypes[2] {
		return e.ProjectLogParticipant, nil
	}
	return nil, &NotLoadedError{edge: "project_log_participant"}
}

// ProjectLogFeedbackOrErr returns the ProjectLogFeedback value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectLogEdges) ProjectLogFeedbackOrErr() ([]*ProjectLogFeedback, error) {
	if e.loadedTypes[3] {
		return e.ProjectLogFeedback, nil
	}
	return nil, &NotLoadedError{edge: "project_log_feedback"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectlog.FieldID:
			values[i] = new(sql.NullInt64)
		case projectlog.FieldTitle, projectlog.FieldAuthor, projectlog.FieldContent, projectlog.FieldStartDate, projectlog.FieldEndDate:
			values[i] = new(sql.NullString)
		case projectlog.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case projectlog.ForeignKeys[0]: // project_project_log
			values[i] = new(sql.NullInt64)
		case projectlog.ForeignKeys[1]: // project_club_project_log
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectLog fields.
func (pl *ProjectLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case projectlog.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pl.Title = value.String
			}
		case projectlog.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				pl.Author = value.String
			}
		case projectlog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pl.Content = value.String
			}
		case projectlog.FieldStartDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				pl.StartDate = value.String
			}
		case projectlog.FieldEndDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				pl.EndDate = value.String
			}
		case projectlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case projectlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_project_log", value)
			} else if value.Valid {
				pl.project_project_log = new(int)
				*pl.project_project_log = int(value.Int64)
			}
		case projectlog.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_club_project_log", value)
			} else if value.Valid {
				pl.project_club_project_log = new(int)
				*pl.project_club_project_log = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the ProjectLog entity.
func (pl *ProjectLog) QueryProject() *ProjectQuery {
	return (&ProjectLogClient{config: pl.config}).QueryProject(pl)
}

// QueryProjectClub queries the "project_club" edge of the ProjectLog entity.
func (pl *ProjectLog) QueryProjectClub() *ProjectClubQuery {
	return (&ProjectLogClient{config: pl.config}).QueryProjectClub(pl)
}

// QueryProjectLogParticipant queries the "project_log_participant" edge of the ProjectLog entity.
func (pl *ProjectLog) QueryProjectLogParticipant() *ProjectLogParticipantQuery {
	return (&ProjectLogClient{config: pl.config}).QueryProjectLogParticipant(pl)
}

// QueryProjectLogFeedback queries the "project_log_feedback" edge of the ProjectLog entity.
func (pl *ProjectLog) QueryProjectLogFeedback() *ProjectLogFeedbackQuery {
	return (&ProjectLogClient{config: pl.config}).QueryProjectLogFeedback(pl)
}

// Update returns a builder for updating this ProjectLog.
// Note that you need to call ProjectLog.Unwrap() before calling this method if this ProjectLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *ProjectLog) Update() *ProjectLogUpdateOne {
	return (&ProjectLogClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the ProjectLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *ProjectLog) Unwrap() *ProjectLog {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectLog is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *ProjectLog) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectLog(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", title=")
	builder.WriteString(pl.Title)
	builder.WriteString(", author=")
	builder.WriteString(pl.Author)
	builder.WriteString(", content=")
	builder.WriteString(pl.Content)
	builder.WriteString(", start_date=")
	builder.WriteString(pl.StartDate)
	builder.WriteString(", end_date=")
	builder.WriteString(pl.EndDate)
	builder.WriteString(", created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectLogs is a parsable slice of ProjectLog.
type ProjectLogs []*ProjectLog

func (pl ProjectLogs) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
