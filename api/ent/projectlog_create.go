// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectclub"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogfeedback"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogparticipant"
)

// ProjectLogCreate is the builder for creating a ProjectLog entity.
type ProjectLogCreate struct {
	config
	mutation *ProjectLogMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (plc *ProjectLogCreate) SetTitle(s string) *ProjectLogCreate {
	plc.mutation.SetTitle(s)
	return plc
}

// SetAuthor sets the "author" field.
func (plc *ProjectLogCreate) SetAuthor(s string) *ProjectLogCreate {
	plc.mutation.SetAuthor(s)
	return plc
}

// SetContent sets the "content" field.
func (plc *ProjectLogCreate) SetContent(s string) *ProjectLogCreate {
	plc.mutation.SetContent(s)
	return plc
}

// SetStartDate sets the "start_date" field.
func (plc *ProjectLogCreate) SetStartDate(s string) *ProjectLogCreate {
	plc.mutation.SetStartDate(s)
	return plc
}

// SetEndDate sets the "end_date" field.
func (plc *ProjectLogCreate) SetEndDate(s string) *ProjectLogCreate {
	plc.mutation.SetEndDate(s)
	return plc
}

// SetCreatedAt sets the "created_at" field.
func (plc *ProjectLogCreate) SetCreatedAt(t time.Time) *ProjectLogCreate {
	plc.mutation.SetCreatedAt(t)
	return plc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (plc *ProjectLogCreate) SetNillableCreatedAt(t *time.Time) *ProjectLogCreate {
	if t != nil {
		plc.SetCreatedAt(*t)
	}
	return plc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (plc *ProjectLogCreate) SetProjectID(id int) *ProjectLogCreate {
	plc.mutation.SetProjectID(id)
	return plc
}

// SetProject sets the "project" edge to the Project entity.
func (plc *ProjectLogCreate) SetProject(p *Project) *ProjectLogCreate {
	return plc.SetProjectID(p.ID)
}

// SetProjectClubID sets the "project_club" edge to the ProjectClub entity by ID.
func (plc *ProjectLogCreate) SetProjectClubID(id int) *ProjectLogCreate {
	plc.mutation.SetProjectClubID(id)
	return plc
}

// SetProjectClub sets the "project_club" edge to the ProjectClub entity.
func (plc *ProjectLogCreate) SetProjectClub(p *ProjectClub) *ProjectLogCreate {
	return plc.SetProjectClubID(p.ID)
}

// AddProjectLogParticipantIDs adds the "project_log_participant" edge to the ProjectLogParticipant entity by IDs.
func (plc *ProjectLogCreate) AddProjectLogParticipantIDs(ids ...int) *ProjectLogCreate {
	plc.mutation.AddProjectLogParticipantIDs(ids...)
	return plc
}

// AddProjectLogParticipant adds the "project_log_participant" edges to the ProjectLogParticipant entity.
func (plc *ProjectLogCreate) AddProjectLogParticipant(p ...*ProjectLogParticipant) *ProjectLogCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return plc.AddProjectLogParticipantIDs(ids...)
}

// AddProjectLogFeedbackIDs adds the "project_log_feedback" edge to the ProjectLogFeedback entity by IDs.
func (plc *ProjectLogCreate) AddProjectLogFeedbackIDs(ids ...int) *ProjectLogCreate {
	plc.mutation.AddProjectLogFeedbackIDs(ids...)
	return plc
}

// AddProjectLogFeedback adds the "project_log_feedback" edges to the ProjectLogFeedback entity.
func (plc *ProjectLogCreate) AddProjectLogFeedback(p ...*ProjectLogFeedback) *ProjectLogCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return plc.AddProjectLogFeedbackIDs(ids...)
}

// Mutation returns the ProjectLogMutation object of the builder.
func (plc *ProjectLogCreate) Mutation() *ProjectLogMutation {
	return plc.mutation
}

// Save creates the ProjectLog in the database.
func (plc *ProjectLogCreate) Save(ctx context.Context) (*ProjectLog, error) {
	var (
		err  error
		node *ProjectLog
	)
	if len(plc.hooks) == 0 {
		if err = plc.check(); err != nil {
			return nil, err
		}
		node, err = plc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = plc.check(); err != nil {
				return nil, err
			}
			plc.mutation = mutation
			if node, err = plc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(plc.hooks) - 1; i >= 0; i-- {
			if plc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = plc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, plc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (plc *ProjectLogCreate) SaveX(ctx context.Context) *ProjectLog {
	v, err := plc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plc *ProjectLogCreate) Exec(ctx context.Context) error {
	_, err := plc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plc *ProjectLogCreate) ExecX(ctx context.Context) {
	if err := plc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plc *ProjectLogCreate) check() error {
	if _, ok := plc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if _, ok := plc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "author"`)}
	}
	if _, ok := plc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "content"`)}
	}
	if _, ok := plc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "start_date"`)}
	}
	if _, ok := plc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "end_date"`)}
	}
	if _, ok := plc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New("ent: missing required edge \"project\"")}
	}
	if _, ok := plc.mutation.ProjectClubID(); !ok {
		return &ValidationError{Name: "project_club", err: errors.New("ent: missing required edge \"project_club\"")}
	}
	return nil
}

func (plc *ProjectLogCreate) sqlSave(ctx context.Context) (*ProjectLog, error) {
	_node, _spec := plc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (plc *ProjectLogCreate) createSpec() (*ProjectLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectLog{config: plc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: projectlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectlog.FieldID,
			},
		}
	)
	if value, ok := plc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlog.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := plc.mutation.Author(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlog.FieldAuthor,
		})
		_node.Author = value
	}
	if value, ok := plc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlog.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := plc.mutation.StartDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlog.FieldStartDate,
		})
		_node.StartDate = value
	}
	if value, ok := plc.mutation.EndDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlog.FieldEndDate,
		})
		_node.EndDate = value
	}
	if value, ok := plc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: projectlog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := plc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlog.ProjectTable,
			Columns: []string{projectlog.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_project_log = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := plc.mutation.ProjectClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlog.ProjectClubTable,
			Columns: []string{projectlog.ProjectClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectclub.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_club_project_log = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := plc.mutation.ProjectLogParticipantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectlog.ProjectLogParticipantTable,
			Columns: []string{projectlog.ProjectLogParticipantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlogparticipant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := plc.mutation.ProjectLogFeedbackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectlog.ProjectLogFeedbackTable,
			Columns: []string{projectlog.ProjectLogFeedbackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlogfeedback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectLogCreateBulk is the builder for creating many ProjectLog entities in bulk.
type ProjectLogCreateBulk struct {
	config
	builders []*ProjectLogCreate
}

// Save creates the ProjectLog entities in the database.
func (plcb *ProjectLogCreateBulk) Save(ctx context.Context) ([]*ProjectLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(plcb.builders))
	nodes := make([]*ProjectLog, len(plcb.builders))
	mutators := make([]Mutator, len(plcb.builders))
	for i := range plcb.builders {
		func(i int, root context.Context) {
			builder := plcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plcb *ProjectLogCreateBulk) SaveX(ctx context.Context) []*ProjectLog {
	v, err := plcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plcb *ProjectLogCreateBulk) Exec(ctx context.Context) error {
	_, err := plcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plcb *ProjectLogCreateBulk) ExecX(ctx context.Context) {
	if err := plcb.Exec(ctx); err != nil {
		panic(err)
	}
}
