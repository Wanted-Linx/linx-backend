// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/predicate"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectclub"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogfeedback"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogparticipant"
)

// ProjectLogQuery is the builder for querying ProjectLog entities.
type ProjectLogQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ProjectLog
	// eager-loading edges.
	withProject               *ProjectQuery
	withProjectClub           *ProjectClubQuery
	withProjectLogParticipant *ProjectLogParticipantQuery
	withProjectLogFeedback    *ProjectLogFeedbackQuery
	withFKs                   bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectLogQuery builder.
func (plq *ProjectLogQuery) Where(ps ...predicate.ProjectLog) *ProjectLogQuery {
	plq.predicates = append(plq.predicates, ps...)
	return plq
}

// Limit adds a limit step to the query.
func (plq *ProjectLogQuery) Limit(limit int) *ProjectLogQuery {
	plq.limit = &limit
	return plq
}

// Offset adds an offset step to the query.
func (plq *ProjectLogQuery) Offset(offset int) *ProjectLogQuery {
	plq.offset = &offset
	return plq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (plq *ProjectLogQuery) Unique(unique bool) *ProjectLogQuery {
	plq.unique = &unique
	return plq
}

// Order adds an order step to the query.
func (plq *ProjectLogQuery) Order(o ...OrderFunc) *ProjectLogQuery {
	plq.order = append(plq.order, o...)
	return plq
}

// QueryProject chains the current query on the "project" edge.
func (plq *ProjectLogQuery) QueryProject() *ProjectQuery {
	query := &ProjectQuery{config: plq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := plq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := plq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlog.Table, projectlog.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectlog.ProjectTable, projectlog.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(plq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjectClub chains the current query on the "project_club" edge.
func (plq *ProjectLogQuery) QueryProjectClub() *ProjectClubQuery {
	query := &ProjectClubQuery{config: plq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := plq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := plq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlog.Table, projectlog.FieldID, selector),
			sqlgraph.To(projectclub.Table, projectclub.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectlog.ProjectClubTable, projectlog.ProjectClubColumn),
		)
		fromU = sqlgraph.SetNeighbors(plq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjectLogParticipant chains the current query on the "project_log_participant" edge.
func (plq *ProjectLogQuery) QueryProjectLogParticipant() *ProjectLogParticipantQuery {
	query := &ProjectLogParticipantQuery{config: plq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := plq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := plq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlog.Table, projectlog.FieldID, selector),
			sqlgraph.To(projectlogparticipant.Table, projectlogparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectlog.ProjectLogParticipantTable, projectlog.ProjectLogParticipantColumn),
		)
		fromU = sqlgraph.SetNeighbors(plq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjectLogFeedback chains the current query on the "project_log_feedback" edge.
func (plq *ProjectLogQuery) QueryProjectLogFeedback() *ProjectLogFeedbackQuery {
	query := &ProjectLogFeedbackQuery{config: plq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := plq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := plq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlog.Table, projectlog.FieldID, selector),
			sqlgraph.To(projectlogfeedback.Table, projectlogfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectlog.ProjectLogFeedbackTable, projectlog.ProjectLogFeedbackColumn),
		)
		fromU = sqlgraph.SetNeighbors(plq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProjectLog entity from the query.
// Returns a *NotFoundError when no ProjectLog was found.
func (plq *ProjectLogQuery) First(ctx context.Context) (*ProjectLog, error) {
	nodes, err := plq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{projectlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (plq *ProjectLogQuery) FirstX(ctx context.Context) *ProjectLog {
	node, err := plq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProjectLog ID from the query.
// Returns a *NotFoundError when no ProjectLog ID was found.
func (plq *ProjectLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = plq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{projectlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (plq *ProjectLogQuery) FirstIDX(ctx context.Context) int {
	id, err := plq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProjectLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ProjectLog entity is not found.
// Returns a *NotFoundError when no ProjectLog entities are found.
func (plq *ProjectLogQuery) Only(ctx context.Context) (*ProjectLog, error) {
	nodes, err := plq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{projectlog.Label}
	default:
		return nil, &NotSingularError{projectlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (plq *ProjectLogQuery) OnlyX(ctx context.Context) *ProjectLog {
	node, err := plq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProjectLog ID in the query.
// Returns a *NotSingularError when exactly one ProjectLog ID is not found.
// Returns a *NotFoundError when no entities are found.
func (plq *ProjectLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = plq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{projectlog.Label}
	default:
		err = &NotSingularError{projectlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (plq *ProjectLogQuery) OnlyIDX(ctx context.Context) int {
	id, err := plq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProjectLogs.
func (plq *ProjectLogQuery) All(ctx context.Context) ([]*ProjectLog, error) {
	if err := plq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return plq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (plq *ProjectLogQuery) AllX(ctx context.Context) []*ProjectLog {
	nodes, err := plq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProjectLog IDs.
func (plq *ProjectLogQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := plq.Select(projectlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (plq *ProjectLogQuery) IDsX(ctx context.Context) []int {
	ids, err := plq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (plq *ProjectLogQuery) Count(ctx context.Context) (int, error) {
	if err := plq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return plq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (plq *ProjectLogQuery) CountX(ctx context.Context) int {
	count, err := plq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (plq *ProjectLogQuery) Exist(ctx context.Context) (bool, error) {
	if err := plq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return plq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (plq *ProjectLogQuery) ExistX(ctx context.Context) bool {
	exist, err := plq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (plq *ProjectLogQuery) Clone() *ProjectLogQuery {
	if plq == nil {
		return nil
	}
	return &ProjectLogQuery{
		config:                    plq.config,
		limit:                     plq.limit,
		offset:                    plq.offset,
		order:                     append([]OrderFunc{}, plq.order...),
		predicates:                append([]predicate.ProjectLog{}, plq.predicates...),
		withProject:               plq.withProject.Clone(),
		withProjectClub:           plq.withProjectClub.Clone(),
		withProjectLogParticipant: plq.withProjectLogParticipant.Clone(),
		withProjectLogFeedback:    plq.withProjectLogFeedback.Clone(),
		// clone intermediate query.
		sql:  plq.sql.Clone(),
		path: plq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (plq *ProjectLogQuery) WithProject(opts ...func(*ProjectQuery)) *ProjectLogQuery {
	query := &ProjectQuery{config: plq.config}
	for _, opt := range opts {
		opt(query)
	}
	plq.withProject = query
	return plq
}

// WithProjectClub tells the query-builder to eager-load the nodes that are connected to
// the "project_club" edge. The optional arguments are used to configure the query builder of the edge.
func (plq *ProjectLogQuery) WithProjectClub(opts ...func(*ProjectClubQuery)) *ProjectLogQuery {
	query := &ProjectClubQuery{config: plq.config}
	for _, opt := range opts {
		opt(query)
	}
	plq.withProjectClub = query
	return plq
}

// WithProjectLogParticipant tells the query-builder to eager-load the nodes that are connected to
// the "project_log_participant" edge. The optional arguments are used to configure the query builder of the edge.
func (plq *ProjectLogQuery) WithProjectLogParticipant(opts ...func(*ProjectLogParticipantQuery)) *ProjectLogQuery {
	query := &ProjectLogParticipantQuery{config: plq.config}
	for _, opt := range opts {
		opt(query)
	}
	plq.withProjectLogParticipant = query
	return plq
}

// WithProjectLogFeedback tells the query-builder to eager-load the nodes that are connected to
// the "project_log_feedback" edge. The optional arguments are used to configure the query builder of the edge.
func (plq *ProjectLogQuery) WithProjectLogFeedback(opts ...func(*ProjectLogFeedbackQuery)) *ProjectLogQuery {
	query := &ProjectLogFeedbackQuery{config: plq.config}
	for _, opt := range opts {
		opt(query)
	}
	plq.withProjectLogFeedback = query
	return plq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProjectLog.Query().
//		GroupBy(projectlog.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (plq *ProjectLogQuery) GroupBy(field string, fields ...string) *ProjectLogGroupBy {
	group := &ProjectLogGroupBy{config: plq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := plq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return plq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.ProjectLog.Query().
//		Select(projectlog.FieldTitle).
//		Scan(ctx, &v)
//
func (plq *ProjectLogQuery) Select(fields ...string) *ProjectLogSelect {
	plq.fields = append(plq.fields, fields...)
	return &ProjectLogSelect{ProjectLogQuery: plq}
}

func (plq *ProjectLogQuery) prepareQuery(ctx context.Context) error {
	for _, f := range plq.fields {
		if !projectlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if plq.path != nil {
		prev, err := plq.path(ctx)
		if err != nil {
			return err
		}
		plq.sql = prev
	}
	return nil
}

func (plq *ProjectLogQuery) sqlAll(ctx context.Context) ([]*ProjectLog, error) {
	var (
		nodes       = []*ProjectLog{}
		withFKs     = plq.withFKs
		_spec       = plq.querySpec()
		loadedTypes = [4]bool{
			plq.withProject != nil,
			plq.withProjectClub != nil,
			plq.withProjectLogParticipant != nil,
			plq.withProjectLogFeedback != nil,
		}
	)
	if plq.withProject != nil || plq.withProjectClub != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, projectlog.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ProjectLog{config: plq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, plq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := plq.withProject; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProjectLog)
		for i := range nodes {
			if nodes[i].project_project_log == nil {
				continue
			}
			fk := *nodes[i].project_project_log
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(project.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_project_log" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Project = n
			}
		}
	}

	if query := plq.withProjectClub; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ProjectLog)
		for i := range nodes {
			if nodes[i].project_club_project_log == nil {
				continue
			}
			fk := *nodes[i].project_club_project_log
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(projectclub.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_club_project_log" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.ProjectClub = n
			}
		}
	}

	if query := plq.withProjectLogParticipant; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProjectLog)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProjectLogParticipant = []*ProjectLogParticipant{}
		}
		query.withFKs = true
		query.Where(predicate.ProjectLogParticipant(func(s *sql.Selector) {
			s.Where(sql.InValues(projectlog.ProjectLogParticipantColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.project_log_project_log_participant
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "project_log_project_log_participant" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_log_project_log_participant" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProjectLogParticipant = append(node.Edges.ProjectLogParticipant, n)
		}
	}

	if query := plq.withProjectLogFeedback; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ProjectLog)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.ProjectLogFeedback = []*ProjectLogFeedback{}
		}
		query.withFKs = true
		query.Where(predicate.ProjectLogFeedback(func(s *sql.Selector) {
			s.Where(sql.InValues(projectlog.ProjectLogFeedbackColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.project_log_project_log_feedback
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "project_log_project_log_feedback" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "project_log_project_log_feedback" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.ProjectLogFeedback = append(node.Edges.ProjectLogFeedback, n)
		}
	}

	return nodes, nil
}

func (plq *ProjectLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := plq.querySpec()
	return sqlgraph.CountNodes(ctx, plq.driver, _spec)
}

func (plq *ProjectLogQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := plq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (plq *ProjectLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectlog.Table,
			Columns: projectlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectlog.FieldID,
			},
		},
		From:   plq.sql,
		Unique: true,
	}
	if unique := plq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := plq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectlog.FieldID)
		for i := range fields {
			if fields[i] != projectlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := plq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := plq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := plq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := plq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (plq *ProjectLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(plq.driver.Dialect())
	t1 := builder.Table(projectlog.Table)
	columns := plq.fields
	if len(columns) == 0 {
		columns = projectlog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if plq.sql != nil {
		selector = plq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range plq.predicates {
		p(selector)
	}
	for _, p := range plq.order {
		p(selector)
	}
	if offset := plq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := plq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProjectLogGroupBy is the group-by builder for ProjectLog entities.
type ProjectLogGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (plgb *ProjectLogGroupBy) Aggregate(fns ...AggregateFunc) *ProjectLogGroupBy {
	plgb.fns = append(plgb.fns, fns...)
	return plgb
}

// Scan applies the group-by query and scans the result into the given value.
func (plgb *ProjectLogGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := plgb.path(ctx)
	if err != nil {
		return err
	}
	plgb.sql = query
	return plgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (plgb *ProjectLogGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := plgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (plgb *ProjectLogGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(plgb.fields) > 1 {
		return nil, errors.New("ent: ProjectLogGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := plgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (plgb *ProjectLogGroupBy) StringsX(ctx context.Context) []string {
	v, err := plgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (plgb *ProjectLogGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = plgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projectlog.Label}
	default:
		err = fmt.Errorf("ent: ProjectLogGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (plgb *ProjectLogGroupBy) StringX(ctx context.Context) string {
	v, err := plgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (plgb *ProjectLogGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(plgb.fields) > 1 {
		return nil, errors.New("ent: ProjectLogGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := plgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (plgb *ProjectLogGroupBy) IntsX(ctx context.Context) []int {
	v, err := plgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (plgb *ProjectLogGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = plgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projectlog.Label}
	default:
		err = fmt.Errorf("ent: ProjectLogGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (plgb *ProjectLogGroupBy) IntX(ctx context.Context) int {
	v, err := plgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (plgb *ProjectLogGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(plgb.fields) > 1 {
		return nil, errors.New("ent: ProjectLogGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := plgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (plgb *ProjectLogGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := plgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (plgb *ProjectLogGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = plgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projectlog.Label}
	default:
		err = fmt.Errorf("ent: ProjectLogGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (plgb *ProjectLogGroupBy) Float64X(ctx context.Context) float64 {
	v, err := plgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (plgb *ProjectLogGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(plgb.fields) > 1 {
		return nil, errors.New("ent: ProjectLogGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := plgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (plgb *ProjectLogGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := plgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (plgb *ProjectLogGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = plgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projectlog.Label}
	default:
		err = fmt.Errorf("ent: ProjectLogGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (plgb *ProjectLogGroupBy) BoolX(ctx context.Context) bool {
	v, err := plgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (plgb *ProjectLogGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range plgb.fields {
		if !projectlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := plgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := plgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (plgb *ProjectLogGroupBy) sqlQuery() *sql.Selector {
	selector := plgb.sql.Select()
	aggregation := make([]string, 0, len(plgb.fns))
	for _, fn := range plgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(plgb.fields)+len(plgb.fns))
		for _, f := range plgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(plgb.fields...)...)
}

// ProjectLogSelect is the builder for selecting fields of ProjectLog entities.
type ProjectLogSelect struct {
	*ProjectLogQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pls *ProjectLogSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pls.prepareQuery(ctx); err != nil {
		return err
	}
	pls.sql = pls.ProjectLogQuery.sqlQuery(ctx)
	return pls.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pls *ProjectLogSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pls.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pls *ProjectLogSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pls.fields) > 1 {
		return nil, errors.New("ent: ProjectLogSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pls *ProjectLogSelect) StringsX(ctx context.Context) []string {
	v, err := pls.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pls *ProjectLogSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pls.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projectlog.Label}
	default:
		err = fmt.Errorf("ent: ProjectLogSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pls *ProjectLogSelect) StringX(ctx context.Context) string {
	v, err := pls.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pls *ProjectLogSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pls.fields) > 1 {
		return nil, errors.New("ent: ProjectLogSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pls *ProjectLogSelect) IntsX(ctx context.Context) []int {
	v, err := pls.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pls *ProjectLogSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pls.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projectlog.Label}
	default:
		err = fmt.Errorf("ent: ProjectLogSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pls *ProjectLogSelect) IntX(ctx context.Context) int {
	v, err := pls.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pls *ProjectLogSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pls.fields) > 1 {
		return nil, errors.New("ent: ProjectLogSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pls *ProjectLogSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pls.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pls *ProjectLogSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pls.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projectlog.Label}
	default:
		err = fmt.Errorf("ent: ProjectLogSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pls *ProjectLogSelect) Float64X(ctx context.Context) float64 {
	v, err := pls.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pls *ProjectLogSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pls.fields) > 1 {
		return nil, errors.New("ent: ProjectLogSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pls.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pls *ProjectLogSelect) BoolsX(ctx context.Context) []bool {
	v, err := pls.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pls *ProjectLogSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pls.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{projectlog.Label}
	default:
		err = fmt.Errorf("ent: ProjectLogSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pls *ProjectLogSelect) BoolX(ctx context.Context) bool {
	v, err := pls.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pls *ProjectLogSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pls.sql.Query()
	if err := pls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
