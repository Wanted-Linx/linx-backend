// Code generated by entc, DO NOT EDIT.

package club

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Wanted-Linx/linx-backend/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Organization applies equality check predicate on the "organization" field. It's identical to OrganizationEQ.
func Organization(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganization), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// ProfileImage applies equality check predicate on the "profile_image" field. It's identical to ProfileImageEQ.
func ProfileImage(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileImage), v))
	})
}

// ProfileLink applies equality check predicate on the "profile_link" field. It's identical to ProfileLinkEQ.
func ProfileLink(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileLink), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// OrganizationEQ applies the EQ predicate on the "organization" field.
func OrganizationEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganization), v))
	})
}

// OrganizationNEQ applies the NEQ predicate on the "organization" field.
func OrganizationNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrganization), v))
	})
}

// OrganizationIn applies the In predicate on the "organization" field.
func OrganizationIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrganization), v...))
	})
}

// OrganizationNotIn applies the NotIn predicate on the "organization" field.
func OrganizationNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrganization), v...))
	})
}

// OrganizationGT applies the GT predicate on the "organization" field.
func OrganizationGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrganization), v))
	})
}

// OrganizationGTE applies the GTE predicate on the "organization" field.
func OrganizationGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrganization), v))
	})
}

// OrganizationLT applies the LT predicate on the "organization" field.
func OrganizationLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrganization), v))
	})
}

// OrganizationLTE applies the LTE predicate on the "organization" field.
func OrganizationLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrganization), v))
	})
}

// OrganizationContains applies the Contains predicate on the "organization" field.
func OrganizationContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrganization), v))
	})
}

// OrganizationHasPrefix applies the HasPrefix predicate on the "organization" field.
func OrganizationHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrganization), v))
	})
}

// OrganizationHasSuffix applies the HasSuffix predicate on the "organization" field.
func OrganizationHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrganization), v))
	})
}

// OrganizationEqualFold applies the EqualFold predicate on the "organization" field.
func OrganizationEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrganization), v))
	})
}

// OrganizationContainsFold applies the ContainsFold predicate on the "organization" field.
func OrganizationContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrganization), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// ProfileImageEQ applies the EQ predicate on the "profile_image" field.
func ProfileImageEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileImage), v))
	})
}

// ProfileImageNEQ applies the NEQ predicate on the "profile_image" field.
func ProfileImageNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProfileImage), v))
	})
}

// ProfileImageIn applies the In predicate on the "profile_image" field.
func ProfileImageIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProfileImage), v...))
	})
}

// ProfileImageNotIn applies the NotIn predicate on the "profile_image" field.
func ProfileImageNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProfileImage), v...))
	})
}

// ProfileImageGT applies the GT predicate on the "profile_image" field.
func ProfileImageGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProfileImage), v))
	})
}

// ProfileImageGTE applies the GTE predicate on the "profile_image" field.
func ProfileImageGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProfileImage), v))
	})
}

// ProfileImageLT applies the LT predicate on the "profile_image" field.
func ProfileImageLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProfileImage), v))
	})
}

// ProfileImageLTE applies the LTE predicate on the "profile_image" field.
func ProfileImageLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProfileImage), v))
	})
}

// ProfileImageContains applies the Contains predicate on the "profile_image" field.
func ProfileImageContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProfileImage), v))
	})
}

// ProfileImageHasPrefix applies the HasPrefix predicate on the "profile_image" field.
func ProfileImageHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProfileImage), v))
	})
}

// ProfileImageHasSuffix applies the HasSuffix predicate on the "profile_image" field.
func ProfileImageHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProfileImage), v))
	})
}

// ProfileImageIsNil applies the IsNil predicate on the "profile_image" field.
func ProfileImageIsNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProfileImage)))
	})
}

// ProfileImageNotNil applies the NotNil predicate on the "profile_image" field.
func ProfileImageNotNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProfileImage)))
	})
}

// ProfileImageEqualFold applies the EqualFold predicate on the "profile_image" field.
func ProfileImageEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProfileImage), v))
	})
}

// ProfileImageContainsFold applies the ContainsFold predicate on the "profile_image" field.
func ProfileImageContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProfileImage), v))
	})
}

// ProfileLinkEQ applies the EQ predicate on the "profile_link" field.
func ProfileLinkEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkNEQ applies the NEQ predicate on the "profile_link" field.
func ProfileLinkNEQ(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkIn applies the In predicate on the "profile_link" field.
func ProfileLinkIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProfileLink), v...))
	})
}

// ProfileLinkNotIn applies the NotIn predicate on the "profile_link" field.
func ProfileLinkNotIn(vs ...string) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProfileLink), v...))
	})
}

// ProfileLinkGT applies the GT predicate on the "profile_link" field.
func ProfileLinkGT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkGTE applies the GTE predicate on the "profile_link" field.
func ProfileLinkGTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkLT applies the LT predicate on the "profile_link" field.
func ProfileLinkLT(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkLTE applies the LTE predicate on the "profile_link" field.
func ProfileLinkLTE(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkContains applies the Contains predicate on the "profile_link" field.
func ProfileLinkContains(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkHasPrefix applies the HasPrefix predicate on the "profile_link" field.
func ProfileLinkHasPrefix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkHasSuffix applies the HasSuffix predicate on the "profile_link" field.
func ProfileLinkHasSuffix(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkIsNil applies the IsNil predicate on the "profile_link" field.
func ProfileLinkIsNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProfileLink)))
	})
}

// ProfileLinkNotNil applies the NotNil predicate on the "profile_link" field.
func ProfileLinkNotNil() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProfileLink)))
	})
}

// ProfileLinkEqualFold applies the EqualFold predicate on the "profile_link" field.
func ProfileLinkEqualFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProfileLink), v))
	})
}

// ProfileLinkContainsFold applies the ContainsFold predicate on the "profile_link" field.
func ProfileLinkContainsFold(v string) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProfileLink), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Club {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Club(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasLeader applies the HasEdge predicate on the "leader" edge.
func HasLeader() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeaderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeaderTable, LeaderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeaderWith applies the HasEdge predicate on the "leader" edge with a given conditions (other predicates).
func HasLeaderWith(preds ...predicate.Student) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LeaderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeaderTable, LeaderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClubMember applies the HasEdge predicate on the "club_member" edge.
func HasClubMember() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClubMemberTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClubMemberTable, ClubMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClubMemberWith applies the HasEdge predicate on the "club_member" edge with a given conditions (other predicates).
func HasClubMemberWith(preds ...predicate.ClubMember) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClubMemberInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ClubMemberTable, ClubMemberColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProjectClub applies the HasEdge predicate on the "project_club" edge.
func HasProjectClub() predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectClubTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectClubTable, ProjectClubColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectClubWith applies the HasEdge predicate on the "project_club" edge with a given conditions (other predicates).
func HasProjectClubWith(preds ...predicate.ProjectClub) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProjectClubInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProjectClubTable, ProjectClubColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Club) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Club) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Club) predicate.Club {
	return predicate.Club(func(s *sql.Selector) {
		p(s.Not())
	})
}
