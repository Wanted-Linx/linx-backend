// Code generated by entc, DO NOT EDIT.

package club

import (
	"time"
)

const (
	// Label holds the string label denoting the club type in the database.
	Label = "club"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOrganization holds the string denoting the organization field in the database.
	FieldOrganization = "organization"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldProfileImage holds the string denoting the profile_image field in the database.
	FieldProfileImage = "profile_image"
	// FieldProfileLink holds the string denoting the profile_link field in the database.
	FieldProfileLink = "profile_link"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeLeader holds the string denoting the leader edge name in mutations.
	EdgeLeader = "leader"
	// EdgeClubMember holds the string denoting the club_member edge name in mutations.
	EdgeClubMember = "club_member"
	// Table holds the table name of the club in the database.
	Table = "clubs"
	// LeaderTable is the table that holds the leader relation/edge.
	LeaderTable = "clubs"
	// LeaderInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	LeaderInverseTable = "students"
	// LeaderColumn is the table column denoting the leader relation/edge.
	LeaderColumn = "student_club"
	// ClubMemberTable is the table that holds the club_member relation/edge.
	ClubMemberTable = "club_members"
	// ClubMemberInverseTable is the table name for the ClubMember entity.
	// It exists in this package in order to avoid circular dependency with the "clubmember" package.
	ClubMemberInverseTable = "club_members"
	// ClubMemberColumn is the table column denoting the club_member relation/edge.
	ClubMemberColumn = "club_id"
)

// Columns holds all SQL columns for club fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldOrganization,
	FieldDescription,
	FieldProfileImage,
	FieldProfileLink,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "clubs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"student_club",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
