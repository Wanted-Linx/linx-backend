// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/company"
	"github.com/Wanted-Linx/linx-backend/api/ent/predicate"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/tasktype"
	"github.com/Wanted-Linx/linx-backend/api/ent/user"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetBusinessNumber sets the "business_number" field.
func (cu *CompanyUpdate) SetBusinessNumber(s string) *CompanyUpdate {
	cu.mutation.SetBusinessNumber(s)
	return cu
}

// SetAddress sets the "address" field.
func (cu *CompanyUpdate) SetAddress(s string) *CompanyUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableAddress(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// ClearAddress clears the value of the "address" field.
func (cu *CompanyUpdate) ClearAddress() *CompanyUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CompanyUpdate) SetDescription(s string) *CompanyUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableDescription(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CompanyUpdate) ClearDescription() *CompanyUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetProfileImage sets the "profile_image" field.
func (cu *CompanyUpdate) SetProfileImage(s string) *CompanyUpdate {
	cu.mutation.SetProfileImage(s)
	return cu
}

// SetNillableProfileImage sets the "profile_image" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableProfileImage(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetProfileImage(*s)
	}
	return cu
}

// ClearProfileImage clears the value of the "profile_image" field.
func (cu *CompanyUpdate) ClearProfileImage() *CompanyUpdate {
	cu.mutation.ClearProfileImage()
	return cu
}

// SetHompage sets the "hompage" field.
func (cu *CompanyUpdate) SetHompage(s string) *CompanyUpdate {
	cu.mutation.SetHompage(s)
	return cu
}

// SetNillableHompage sets the "hompage" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableHompage(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetHompage(*s)
	}
	return cu
}

// ClearHompage clears the value of the "hompage" field.
func (cu *CompanyUpdate) ClearHompage() *CompanyUpdate {
	cu.mutation.ClearHompage()
	return cu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cu *CompanyUpdate) SetUserID(id int) *CompanyUpdate {
	cu.mutation.SetUserID(id)
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CompanyUpdate) SetUser(u *User) *CompanyUpdate {
	return cu.SetUserID(u.ID)
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (cu *CompanyUpdate) AddProjectIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddProjectIDs(ids...)
	return cu
}

// AddProject adds the "project" edges to the Project entity.
func (cu *CompanyUpdate) AddProject(p ...*Project) *CompanyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddProjectIDs(ids...)
}

// AddTaskTypeIDs adds the "task_type" edge to the TaskType entity by IDs.
func (cu *CompanyUpdate) AddTaskTypeIDs(ids ...int) *CompanyUpdate {
	cu.mutation.AddTaskTypeIDs(ids...)
	return cu
}

// AddTaskType adds the "task_type" edges to the TaskType entity.
func (cu *CompanyUpdate) AddTaskType(t ...*TaskType) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTaskTypeIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CompanyUpdate) ClearUser() *CompanyUpdate {
	cu.mutation.ClearUser()
	return cu
}

// ClearProject clears all "project" edges to the Project entity.
func (cu *CompanyUpdate) ClearProject() *CompanyUpdate {
	cu.mutation.ClearProject()
	return cu
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (cu *CompanyUpdate) RemoveProjectIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveProjectIDs(ids...)
	return cu
}

// RemoveProject removes "project" edges to Project entities.
func (cu *CompanyUpdate) RemoveProject(p ...*Project) *CompanyUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveProjectIDs(ids...)
}

// ClearTaskType clears all "task_type" edges to the TaskType entity.
func (cu *CompanyUpdate) ClearTaskType() *CompanyUpdate {
	cu.mutation.ClearTaskType()
	return cu
}

// RemoveTaskTypeIDs removes the "task_type" edge to TaskType entities by IDs.
func (cu *CompanyUpdate) RemoveTaskTypeIDs(ids ...int) *CompanyUpdate {
	cu.mutation.RemoveTaskTypeIDs(ids...)
	return cu
}

// RemoveTaskType removes "task_type" edges to TaskType entities.
func (cu *CompanyUpdate) RemoveTaskType(t ...*TaskType) *CompanyUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTaskTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CompanyUpdate) check() error {
	if _, ok := cu.mutation.UserID(); cu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   company.Table,
			Columns: company.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: company.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldName,
		})
	}
	if value, ok := cu.mutation.BusinessNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldBusinessNumber,
		})
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldAddress,
		})
	}
	if cu.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: company.FieldAddress,
		})
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldDescription,
		})
	}
	if cu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: company.FieldDescription,
		})
	}
	if value, ok := cu.mutation.ProfileImage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldProfileImage,
		})
	}
	if cu.mutation.ProfileImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: company.FieldProfileImage,
		})
	}
	if value, ok := cu.mutation.Hompage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldHompage,
		})
	}
	if cu.mutation.HompageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: company.FieldHompage,
		})
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.UserTable,
			Columns: []string{company.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.UserTable,
			Columns: []string{company.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProjectTable,
			Columns: []string{company.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedProjectIDs(); len(nodes) > 0 && !cu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProjectTable,
			Columns: []string{company.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProjectTable,
			Columns: []string{company.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TaskTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TaskTypeTable,
			Columns: []string{company.TaskTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tasktype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTaskTypeIDs(); len(nodes) > 0 && !cu.mutation.TaskTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TaskTypeTable,
			Columns: []string{company.TaskTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tasktype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TaskTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TaskTypeTable,
			Columns: []string{company.TaskTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tasktype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetBusinessNumber sets the "business_number" field.
func (cuo *CompanyUpdateOne) SetBusinessNumber(s string) *CompanyUpdateOne {
	cuo.mutation.SetBusinessNumber(s)
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *CompanyUpdateOne) SetAddress(s string) *CompanyUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableAddress(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// ClearAddress clears the value of the "address" field.
func (cuo *CompanyUpdateOne) ClearAddress() *CompanyUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CompanyUpdateOne) SetDescription(s string) *CompanyUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableDescription(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CompanyUpdateOne) ClearDescription() *CompanyUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetProfileImage sets the "profile_image" field.
func (cuo *CompanyUpdateOne) SetProfileImage(s string) *CompanyUpdateOne {
	cuo.mutation.SetProfileImage(s)
	return cuo
}

// SetNillableProfileImage sets the "profile_image" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableProfileImage(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetProfileImage(*s)
	}
	return cuo
}

// ClearProfileImage clears the value of the "profile_image" field.
func (cuo *CompanyUpdateOne) ClearProfileImage() *CompanyUpdateOne {
	cuo.mutation.ClearProfileImage()
	return cuo
}

// SetHompage sets the "hompage" field.
func (cuo *CompanyUpdateOne) SetHompage(s string) *CompanyUpdateOne {
	cuo.mutation.SetHompage(s)
	return cuo
}

// SetNillableHompage sets the "hompage" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableHompage(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetHompage(*s)
	}
	return cuo
}

// ClearHompage clears the value of the "hompage" field.
func (cuo *CompanyUpdateOne) ClearHompage() *CompanyUpdateOne {
	cuo.mutation.ClearHompage()
	return cuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cuo *CompanyUpdateOne) SetUserID(id int) *CompanyUpdateOne {
	cuo.mutation.SetUserID(id)
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CompanyUpdateOne) SetUser(u *User) *CompanyUpdateOne {
	return cuo.SetUserID(u.ID)
}

// AddProjectIDs adds the "project" edge to the Project entity by IDs.
func (cuo *CompanyUpdateOne) AddProjectIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddProjectIDs(ids...)
	return cuo
}

// AddProject adds the "project" edges to the Project entity.
func (cuo *CompanyUpdateOne) AddProject(p ...*Project) *CompanyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddProjectIDs(ids...)
}

// AddTaskTypeIDs adds the "task_type" edge to the TaskType entity by IDs.
func (cuo *CompanyUpdateOne) AddTaskTypeIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.AddTaskTypeIDs(ids...)
	return cuo
}

// AddTaskType adds the "task_type" edges to the TaskType entity.
func (cuo *CompanyUpdateOne) AddTaskType(t ...*TaskType) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTaskTypeIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CompanyUpdateOne) ClearUser() *CompanyUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// ClearProject clears all "project" edges to the Project entity.
func (cuo *CompanyUpdateOne) ClearProject() *CompanyUpdateOne {
	cuo.mutation.ClearProject()
	return cuo
}

// RemoveProjectIDs removes the "project" edge to Project entities by IDs.
func (cuo *CompanyUpdateOne) RemoveProjectIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveProjectIDs(ids...)
	return cuo
}

// RemoveProject removes "project" edges to Project entities.
func (cuo *CompanyUpdateOne) RemoveProject(p ...*Project) *CompanyUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveProjectIDs(ids...)
}

// ClearTaskType clears all "task_type" edges to the TaskType entity.
func (cuo *CompanyUpdateOne) ClearTaskType() *CompanyUpdateOne {
	cuo.mutation.ClearTaskType()
	return cuo
}

// RemoveTaskTypeIDs removes the "task_type" edge to TaskType entities by IDs.
func (cuo *CompanyUpdateOne) RemoveTaskTypeIDs(ids ...int) *CompanyUpdateOne {
	cuo.mutation.RemoveTaskTypeIDs(ids...)
	return cuo
}

// RemoveTaskType removes "task_type" edges to TaskType entities.
func (cuo *CompanyUpdateOne) RemoveTaskType(t ...*TaskType) *CompanyUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTaskTypeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	var (
		err  error
		node *Company
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CompanyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CompanyUpdateOne) check() error {
	if _, ok := cuo.mutation.UserID(); cuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   company.Table,
			Columns: company.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: company.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Company.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldName,
		})
	}
	if value, ok := cuo.mutation.BusinessNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldBusinessNumber,
		})
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldAddress,
		})
	}
	if cuo.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: company.FieldAddress,
		})
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldDescription,
		})
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: company.FieldDescription,
		})
	}
	if value, ok := cuo.mutation.ProfileImage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldProfileImage,
		})
	}
	if cuo.mutation.ProfileImageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: company.FieldProfileImage,
		})
	}
	if value, ok := cuo.mutation.Hompage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: company.FieldHompage,
		})
	}
	if cuo.mutation.HompageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: company.FieldHompage,
		})
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.UserTable,
			Columns: []string{company.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   company.UserTable,
			Columns: []string{company.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProjectTable,
			Columns: []string{company.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedProjectIDs(); len(nodes) > 0 && !cuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProjectTable,
			Columns: []string{company.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.ProjectTable,
			Columns: []string{company.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TaskTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TaskTypeTable,
			Columns: []string{company.TaskTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tasktype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTaskTypeIDs(); len(nodes) > 0 && !cuo.mutation.TaskTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TaskTypeTable,
			Columns: []string{company.TaskTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tasktype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TaskTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.TaskTypeTable,
			Columns: []string{company.TaskTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tasktype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
