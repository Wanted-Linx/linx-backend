// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/predicate"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogfeedback"
)

// ProjectLogFeedbackUpdate is the builder for updating ProjectLogFeedback entities.
type ProjectLogFeedbackUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectLogFeedbackMutation
}

// Where appends a list predicates to the ProjectLogFeedbackUpdate builder.
func (plfu *ProjectLogFeedbackUpdate) Where(ps ...predicate.ProjectLogFeedback) *ProjectLogFeedbackUpdate {
	plfu.mutation.Where(ps...)
	return plfu
}

// SetAuthor sets the "author" field.
func (plfu *ProjectLogFeedbackUpdate) SetAuthor(s string) *ProjectLogFeedbackUpdate {
	plfu.mutation.SetAuthor(s)
	return plfu
}

// SetContent sets the "content" field.
func (plfu *ProjectLogFeedbackUpdate) SetContent(s string) *ProjectLogFeedbackUpdate {
	plfu.mutation.SetContent(s)
	return plfu
}

// SetProjectLogID sets the "project_log" edge to the ProjectLog entity by ID.
func (plfu *ProjectLogFeedbackUpdate) SetProjectLogID(id int) *ProjectLogFeedbackUpdate {
	plfu.mutation.SetProjectLogID(id)
	return plfu
}

// SetProjectLog sets the "project_log" edge to the ProjectLog entity.
func (plfu *ProjectLogFeedbackUpdate) SetProjectLog(p *ProjectLog) *ProjectLogFeedbackUpdate {
	return plfu.SetProjectLogID(p.ID)
}

// Mutation returns the ProjectLogFeedbackMutation object of the builder.
func (plfu *ProjectLogFeedbackUpdate) Mutation() *ProjectLogFeedbackMutation {
	return plfu.mutation
}

// ClearProjectLog clears the "project_log" edge to the ProjectLog entity.
func (plfu *ProjectLogFeedbackUpdate) ClearProjectLog() *ProjectLogFeedbackUpdate {
	plfu.mutation.ClearProjectLog()
	return plfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (plfu *ProjectLogFeedbackUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(plfu.hooks) == 0 {
		if err = plfu.check(); err != nil {
			return 0, err
		}
		affected, err = plfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectLogFeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = plfu.check(); err != nil {
				return 0, err
			}
			plfu.mutation = mutation
			affected, err = plfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(plfu.hooks) - 1; i >= 0; i-- {
			if plfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = plfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, plfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (plfu *ProjectLogFeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := plfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (plfu *ProjectLogFeedbackUpdate) Exec(ctx context.Context) error {
	_, err := plfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plfu *ProjectLogFeedbackUpdate) ExecX(ctx context.Context) {
	if err := plfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plfu *ProjectLogFeedbackUpdate) check() error {
	if _, ok := plfu.mutation.ProjectLogID(); plfu.mutation.ProjectLogCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"project_log\"")
	}
	return nil
}

func (plfu *ProjectLogFeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectlogfeedback.Table,
			Columns: projectlogfeedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectlogfeedback.FieldID,
			},
		},
	}
	if ps := plfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := plfu.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlogfeedback.FieldAuthor,
		})
	}
	if value, ok := plfu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlogfeedback.FieldContent,
		})
	}
	if plfu.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlogfeedback.ProjectLogTable,
			Columns: []string{projectlogfeedback.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plfu.mutation.ProjectLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlogfeedback.ProjectLogTable,
			Columns: []string{projectlogfeedback.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, plfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectlogfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProjectLogFeedbackUpdateOne is the builder for updating a single ProjectLogFeedback entity.
type ProjectLogFeedbackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectLogFeedbackMutation
}

// SetAuthor sets the "author" field.
func (plfuo *ProjectLogFeedbackUpdateOne) SetAuthor(s string) *ProjectLogFeedbackUpdateOne {
	plfuo.mutation.SetAuthor(s)
	return plfuo
}

// SetContent sets the "content" field.
func (plfuo *ProjectLogFeedbackUpdateOne) SetContent(s string) *ProjectLogFeedbackUpdateOne {
	plfuo.mutation.SetContent(s)
	return plfuo
}

// SetProjectLogID sets the "project_log" edge to the ProjectLog entity by ID.
func (plfuo *ProjectLogFeedbackUpdateOne) SetProjectLogID(id int) *ProjectLogFeedbackUpdateOne {
	plfuo.mutation.SetProjectLogID(id)
	return plfuo
}

// SetProjectLog sets the "project_log" edge to the ProjectLog entity.
func (plfuo *ProjectLogFeedbackUpdateOne) SetProjectLog(p *ProjectLog) *ProjectLogFeedbackUpdateOne {
	return plfuo.SetProjectLogID(p.ID)
}

// Mutation returns the ProjectLogFeedbackMutation object of the builder.
func (plfuo *ProjectLogFeedbackUpdateOne) Mutation() *ProjectLogFeedbackMutation {
	return plfuo.mutation
}

// ClearProjectLog clears the "project_log" edge to the ProjectLog entity.
func (plfuo *ProjectLogFeedbackUpdateOne) ClearProjectLog() *ProjectLogFeedbackUpdateOne {
	plfuo.mutation.ClearProjectLog()
	return plfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (plfuo *ProjectLogFeedbackUpdateOne) Select(field string, fields ...string) *ProjectLogFeedbackUpdateOne {
	plfuo.fields = append([]string{field}, fields...)
	return plfuo
}

// Save executes the query and returns the updated ProjectLogFeedback entity.
func (plfuo *ProjectLogFeedbackUpdateOne) Save(ctx context.Context) (*ProjectLogFeedback, error) {
	var (
		err  error
		node *ProjectLogFeedback
	)
	if len(plfuo.hooks) == 0 {
		if err = plfuo.check(); err != nil {
			return nil, err
		}
		node, err = plfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectLogFeedbackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = plfuo.check(); err != nil {
				return nil, err
			}
			plfuo.mutation = mutation
			node, err = plfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(plfuo.hooks) - 1; i >= 0; i-- {
			if plfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = plfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, plfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (plfuo *ProjectLogFeedbackUpdateOne) SaveX(ctx context.Context) *ProjectLogFeedback {
	node, err := plfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (plfuo *ProjectLogFeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := plfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plfuo *ProjectLogFeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := plfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plfuo *ProjectLogFeedbackUpdateOne) check() error {
	if _, ok := plfuo.mutation.ProjectLogID(); plfuo.mutation.ProjectLogCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"project_log\"")
	}
	return nil
}

func (plfuo *ProjectLogFeedbackUpdateOne) sqlSave(ctx context.Context) (_node *ProjectLogFeedback, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectlogfeedback.Table,
			Columns: projectlogfeedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectlogfeedback.FieldID,
			},
		},
	}
	id, ok := plfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProjectLogFeedback.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := plfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectlogfeedback.FieldID)
		for _, f := range fields {
			if !projectlogfeedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectlogfeedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := plfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := plfuo.mutation.Author(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlogfeedback.FieldAuthor,
		})
	}
	if value, ok := plfuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectlogfeedback.FieldContent,
		})
	}
	if plfuo.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlogfeedback.ProjectLogTable,
			Columns: []string{projectlogfeedback.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plfuo.mutation.ProjectLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectlogfeedback.ProjectLogTable,
			Columns: []string{projectlogfeedback.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectLogFeedback{config: plfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, plfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectlogfeedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
