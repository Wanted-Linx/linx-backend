// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/clubmember"
	"github.com/Wanted-Linx/linx-backend/api/ent/student"
)

// ClubMemberCreate is the builder for creating a ClubMember entity.
type ClubMemberCreate struct {
	config
	mutation *ClubMemberMutation
	hooks    []Hook
}

// SetClubID sets the "club_id" field.
func (cmc *ClubMemberCreate) SetClubID(i int) *ClubMemberCreate {
	cmc.mutation.SetClubID(i)
	return cmc
}

// SetStudentID sets the "student_id" field.
func (cmc *ClubMemberCreate) SetStudentID(i int) *ClubMemberCreate {
	cmc.mutation.SetStudentID(i)
	return cmc
}

// SetStudent sets the "student" edge to the Student entity.
func (cmc *ClubMemberCreate) SetStudent(s *Student) *ClubMemberCreate {
	return cmc.SetStudentID(s.ID)
}

// SetClub sets the "club" edge to the Club entity.
func (cmc *ClubMemberCreate) SetClub(c *Club) *ClubMemberCreate {
	return cmc.SetClubID(c.ID)
}

// Mutation returns the ClubMemberMutation object of the builder.
func (cmc *ClubMemberCreate) Mutation() *ClubMemberMutation {
	return cmc.mutation
}

// Save creates the ClubMember in the database.
func (cmc *ClubMemberCreate) Save(ctx context.Context) (*ClubMember, error) {
	var (
		err  error
		node *ClubMember
	)
	if len(cmc.hooks) == 0 {
		if err = cmc.check(); err != nil {
			return nil, err
		}
		node, err = cmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmc.check(); err != nil {
				return nil, err
			}
			cmc.mutation = mutation
			if node, err = cmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cmc.hooks) - 1; i >= 0; i-- {
			if cmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *ClubMemberCreate) SaveX(ctx context.Context) *ClubMember {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *ClubMemberCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *ClubMemberCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *ClubMemberCreate) check() error {
	if _, ok := cmc.mutation.ClubID(); !ok {
		return &ValidationError{Name: "club_id", err: errors.New(`ent: missing required field "club_id"`)}
	}
	if _, ok := cmc.mutation.StudentID(); !ok {
		return &ValidationError{Name: "student_id", err: errors.New(`ent: missing required field "student_id"`)}
	}
	if _, ok := cmc.mutation.StudentID(); !ok {
		return &ValidationError{Name: "student", err: errors.New("ent: missing required edge \"student\"")}
	}
	if _, ok := cmc.mutation.ClubID(); !ok {
		return &ValidationError{Name: "club", err: errors.New("ent: missing required edge \"club\"")}
	}
	return nil
}

func (cmc *ClubMemberCreate) sqlSave(ctx context.Context) (*ClubMember, error) {
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cmc *ClubMemberCreate) createSpec() (*ClubMember, *sqlgraph.CreateSpec) {
	var (
		_node = &ClubMember{config: cmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: clubmember.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: clubmember.FieldID,
			},
		}
	)
	if nodes := cmc.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.StudentTable,
			Columns: []string{clubmember.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StudentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.ClubTable,
			Columns: []string{clubmember.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClubID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClubMemberCreateBulk is the builder for creating many ClubMember entities in bulk.
type ClubMemberCreateBulk struct {
	config
	builders []*ClubMemberCreate
}

// Save creates the ClubMember entities in the database.
func (cmcb *ClubMemberCreateBulk) Save(ctx context.Context) ([]*ClubMember, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*ClubMember, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClubMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *ClubMemberCreateBulk) SaveX(ctx context.Context) []*ClubMember {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *ClubMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *ClubMemberCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
