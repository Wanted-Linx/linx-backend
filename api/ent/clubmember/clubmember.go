// Code generated by entc, DO NOT EDIT.

package clubmember

const (
	// Label holds the string label denoting the clubmember type in the database.
	Label = "club_member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClubID holds the string denoting the club_id field in the database.
	FieldClubID = "club_id"
	// FieldStudentID holds the string denoting the student_id field in the database.
	FieldStudentID = "student_id"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// EdgeClub holds the string denoting the club edge name in mutations.
	EdgeClub = "club"
	// Table holds the table name of the clubmember in the database.
	Table = "club_members"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "club_members"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "student_id"
	// ClubTable is the table that holds the club relation/edge.
	ClubTable = "club_members"
	// ClubInverseTable is the table name for the Club entity.
	// It exists in this package in order to avoid circular dependency with the "club" package.
	ClubInverseTable = "clubs"
	// ClubColumn is the table column denoting the club relation/edge.
	ClubColumn = "club_id"
)

// Columns holds all SQL columns for clubmember fields.
var Columns = []string{
	FieldID,
	FieldClubID,
	FieldStudentID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "club_members"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_club_member",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
