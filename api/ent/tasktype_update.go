// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/company"
	"github.com/Wanted-Linx/linx-backend/api/ent/predicate"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/student"
	"github.com/Wanted-Linx/linx-backend/api/ent/tasktype"
)

// TaskTypeUpdate is the builder for updating TaskType entities.
type TaskTypeUpdate struct {
	config
	hooks    []Hook
	mutation *TaskTypeMutation
}

// Where appends a list predicates to the TaskTypeUpdate builder.
func (ttu *TaskTypeUpdate) Where(ps ...predicate.TaskType) *TaskTypeUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetType sets the "type" field.
func (ttu *TaskTypeUpdate) SetType(s string) *TaskTypeUpdate {
	ttu.mutation.SetType(s)
	return ttu
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (ttu *TaskTypeUpdate) SetStudentID(id int) *TaskTypeUpdate {
	ttu.mutation.SetStudentID(id)
	return ttu
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (ttu *TaskTypeUpdate) SetNillableStudentID(id *int) *TaskTypeUpdate {
	if id != nil {
		ttu = ttu.SetStudentID(*id)
	}
	return ttu
}

// SetStudent sets the "student" edge to the Student entity.
func (ttu *TaskTypeUpdate) SetStudent(s *Student) *TaskTypeUpdate {
	return ttu.SetStudentID(s.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (ttu *TaskTypeUpdate) SetClubID(id int) *TaskTypeUpdate {
	ttu.mutation.SetClubID(id)
	return ttu
}

// SetNillableClubID sets the "club" edge to the Club entity by ID if the given value is not nil.
func (ttu *TaskTypeUpdate) SetNillableClubID(id *int) *TaskTypeUpdate {
	if id != nil {
		ttu = ttu.SetClubID(*id)
	}
	return ttu
}

// SetClub sets the "club" edge to the Club entity.
func (ttu *TaskTypeUpdate) SetClub(c *Club) *TaskTypeUpdate {
	return ttu.SetClubID(c.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (ttu *TaskTypeUpdate) SetCompanyID(id int) *TaskTypeUpdate {
	ttu.mutation.SetCompanyID(id)
	return ttu
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (ttu *TaskTypeUpdate) SetNillableCompanyID(id *int) *TaskTypeUpdate {
	if id != nil {
		ttu = ttu.SetCompanyID(*id)
	}
	return ttu
}

// SetCompany sets the "company" edge to the Company entity.
func (ttu *TaskTypeUpdate) SetCompany(c *Company) *TaskTypeUpdate {
	return ttu.SetCompanyID(c.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ttu *TaskTypeUpdate) SetProjectID(id int) *TaskTypeUpdate {
	ttu.mutation.SetProjectID(id)
	return ttu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ttu *TaskTypeUpdate) SetNillableProjectID(id *int) *TaskTypeUpdate {
	if id != nil {
		ttu = ttu.SetProjectID(*id)
	}
	return ttu
}

// SetProject sets the "project" edge to the Project entity.
func (ttu *TaskTypeUpdate) SetProject(p *Project) *TaskTypeUpdate {
	return ttu.SetProjectID(p.ID)
}

// Mutation returns the TaskTypeMutation object of the builder.
func (ttu *TaskTypeUpdate) Mutation() *TaskTypeMutation {
	return ttu.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (ttu *TaskTypeUpdate) ClearStudent() *TaskTypeUpdate {
	ttu.mutation.ClearStudent()
	return ttu
}

// ClearClub clears the "club" edge to the Club entity.
func (ttu *TaskTypeUpdate) ClearClub() *TaskTypeUpdate {
	ttu.mutation.ClearClub()
	return ttu
}

// ClearCompany clears the "company" edge to the Company entity.
func (ttu *TaskTypeUpdate) ClearCompany() *TaskTypeUpdate {
	ttu.mutation.ClearCompany()
	return ttu
}

// ClearProject clears the "project" edge to the Project entity.
func (ttu *TaskTypeUpdate) ClearProject() *TaskTypeUpdate {
	ttu.mutation.ClearProject()
	return ttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TaskTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ttu.hooks) == 0 {
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			if ttu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TaskTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TaskTypeUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TaskTypeUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttu *TaskTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tasktype.Table,
			Columns: tasktype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tasktype.FieldID,
			},
		},
	}
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktype.FieldType,
		})
	}
	if ttu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.StudentTable,
			Columns: []string{tasktype.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.StudentTable,
			Columns: []string{tasktype.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ClubTable,
			Columns: []string{tasktype.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ClubTable,
			Columns: []string{tasktype.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.CompanyTable,
			Columns: []string{tasktype.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.CompanyTable,
			Columns: []string{tasktype.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ProjectTable,
			Columns: []string{tasktype.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ProjectTable,
			Columns: []string{tasktype.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskTypeUpdateOne is the builder for updating a single TaskType entity.
type TaskTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskTypeMutation
}

// SetType sets the "type" field.
func (ttuo *TaskTypeUpdateOne) SetType(s string) *TaskTypeUpdateOne {
	ttuo.mutation.SetType(s)
	return ttuo
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (ttuo *TaskTypeUpdateOne) SetStudentID(id int) *TaskTypeUpdateOne {
	ttuo.mutation.SetStudentID(id)
	return ttuo
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (ttuo *TaskTypeUpdateOne) SetNillableStudentID(id *int) *TaskTypeUpdateOne {
	if id != nil {
		ttuo = ttuo.SetStudentID(*id)
	}
	return ttuo
}

// SetStudent sets the "student" edge to the Student entity.
func (ttuo *TaskTypeUpdateOne) SetStudent(s *Student) *TaskTypeUpdateOne {
	return ttuo.SetStudentID(s.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (ttuo *TaskTypeUpdateOne) SetClubID(id int) *TaskTypeUpdateOne {
	ttuo.mutation.SetClubID(id)
	return ttuo
}

// SetNillableClubID sets the "club" edge to the Club entity by ID if the given value is not nil.
func (ttuo *TaskTypeUpdateOne) SetNillableClubID(id *int) *TaskTypeUpdateOne {
	if id != nil {
		ttuo = ttuo.SetClubID(*id)
	}
	return ttuo
}

// SetClub sets the "club" edge to the Club entity.
func (ttuo *TaskTypeUpdateOne) SetClub(c *Club) *TaskTypeUpdateOne {
	return ttuo.SetClubID(c.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (ttuo *TaskTypeUpdateOne) SetCompanyID(id int) *TaskTypeUpdateOne {
	ttuo.mutation.SetCompanyID(id)
	return ttuo
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (ttuo *TaskTypeUpdateOne) SetNillableCompanyID(id *int) *TaskTypeUpdateOne {
	if id != nil {
		ttuo = ttuo.SetCompanyID(*id)
	}
	return ttuo
}

// SetCompany sets the "company" edge to the Company entity.
func (ttuo *TaskTypeUpdateOne) SetCompany(c *Company) *TaskTypeUpdateOne {
	return ttuo.SetCompanyID(c.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ttuo *TaskTypeUpdateOne) SetProjectID(id int) *TaskTypeUpdateOne {
	ttuo.mutation.SetProjectID(id)
	return ttuo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ttuo *TaskTypeUpdateOne) SetNillableProjectID(id *int) *TaskTypeUpdateOne {
	if id != nil {
		ttuo = ttuo.SetProjectID(*id)
	}
	return ttuo
}

// SetProject sets the "project" edge to the Project entity.
func (ttuo *TaskTypeUpdateOne) SetProject(p *Project) *TaskTypeUpdateOne {
	return ttuo.SetProjectID(p.ID)
}

// Mutation returns the TaskTypeMutation object of the builder.
func (ttuo *TaskTypeUpdateOne) Mutation() *TaskTypeMutation {
	return ttuo.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (ttuo *TaskTypeUpdateOne) ClearStudent() *TaskTypeUpdateOne {
	ttuo.mutation.ClearStudent()
	return ttuo
}

// ClearClub clears the "club" edge to the Club entity.
func (ttuo *TaskTypeUpdateOne) ClearClub() *TaskTypeUpdateOne {
	ttuo.mutation.ClearClub()
	return ttuo
}

// ClearCompany clears the "company" edge to the Company entity.
func (ttuo *TaskTypeUpdateOne) ClearCompany() *TaskTypeUpdateOne {
	ttuo.mutation.ClearCompany()
	return ttuo
}

// ClearProject clears the "project" edge to the Project entity.
func (ttuo *TaskTypeUpdateOne) ClearProject() *TaskTypeUpdateOne {
	ttuo.mutation.ClearProject()
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TaskTypeUpdateOne) Select(field string, fields ...string) *TaskTypeUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TaskType entity.
func (ttuo *TaskTypeUpdateOne) Save(ctx context.Context) (*TaskType, error) {
	var (
		err  error
		node *TaskType
	)
	if len(ttuo.hooks) == 0 {
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			if ttuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TaskTypeUpdateOne) SaveX(ctx context.Context) *TaskType {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TaskTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TaskTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttuo *TaskTypeUpdateOne) sqlSave(ctx context.Context) (_node *TaskType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tasktype.Table,
			Columns: tasktype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tasktype.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TaskType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tasktype.FieldID)
		for _, f := range fields {
			if !tasktype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tasktype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktype.FieldType,
		})
	}
	if ttuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.StudentTable,
			Columns: []string{tasktype.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.StudentTable,
			Columns: []string{tasktype.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ClubTable,
			Columns: []string{tasktype.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ClubTable,
			Columns: []string{tasktype.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.CompanyTable,
			Columns: []string{tasktype.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.CompanyTable,
			Columns: []string{tasktype.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ProjectTable,
			Columns: []string{tasktype.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ProjectTable,
			Columns: []string{tasktype.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskType{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
