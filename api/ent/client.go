// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Wanted-Linx/linx-backend/api/ent/migrate"

	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/clubmember"
	"github.com/Wanted-Linx/linx-backend/api/ent/company"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectclub"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogfeedback"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogparticipant"
	"github.com/Wanted-Linx/linx-backend/api/ent/student"
	"github.com/Wanted-Linx/linx-backend/api/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Club is the client for interacting with the Club builders.
	Club *ClubClient
	// ClubMember is the client for interacting with the ClubMember builders.
	ClubMember *ClubMemberClient
	// Company is the client for interacting with the Company builders.
	Company *CompanyClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectClub is the client for interacting with the ProjectClub builders.
	ProjectClub *ProjectClubClient
	// ProjectLog is the client for interacting with the ProjectLog builders.
	ProjectLog *ProjectLogClient
	// ProjectLogFeedback is the client for interacting with the ProjectLogFeedback builders.
	ProjectLogFeedback *ProjectLogFeedbackClient
	// ProjectLogParticipant is the client for interacting with the ProjectLogParticipant builders.
	ProjectLogParticipant *ProjectLogParticipantClient
	// Student is the client for interacting with the Student builders.
	Student *StudentClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Club = NewClubClient(c.config)
	c.ClubMember = NewClubMemberClient(c.config)
	c.Company = NewCompanyClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.ProjectClub = NewProjectClubClient(c.config)
	c.ProjectLog = NewProjectLogClient(c.config)
	c.ProjectLogFeedback = NewProjectLogFeedbackClient(c.config)
	c.ProjectLogParticipant = NewProjectLogParticipantClient(c.config)
	c.Student = NewStudentClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Club:                  NewClubClient(cfg),
		ClubMember:            NewClubMemberClient(cfg),
		Company:               NewCompanyClient(cfg),
		Project:               NewProjectClient(cfg),
		ProjectClub:           NewProjectClubClient(cfg),
		ProjectLog:            NewProjectLogClient(cfg),
		ProjectLogFeedback:    NewProjectLogFeedbackClient(cfg),
		ProjectLogParticipant: NewProjectLogParticipantClient(cfg),
		Student:               NewStudentClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                cfg,
		Club:                  NewClubClient(cfg),
		ClubMember:            NewClubMemberClient(cfg),
		Company:               NewCompanyClient(cfg),
		Project:               NewProjectClient(cfg),
		ProjectClub:           NewProjectClubClient(cfg),
		ProjectLog:            NewProjectLogClient(cfg),
		ProjectLogFeedback:    NewProjectLogFeedbackClient(cfg),
		ProjectLogParticipant: NewProjectLogParticipantClient(cfg),
		Student:               NewStudentClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Club.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Club.Use(hooks...)
	c.ClubMember.Use(hooks...)
	c.Company.Use(hooks...)
	c.Project.Use(hooks...)
	c.ProjectClub.Use(hooks...)
	c.ProjectLog.Use(hooks...)
	c.ProjectLogFeedback.Use(hooks...)
	c.ProjectLogParticipant.Use(hooks...)
	c.Student.Use(hooks...)
	c.User.Use(hooks...)
}

// ClubClient is a client for the Club schema.
type ClubClient struct {
	config
}

// NewClubClient returns a client for the Club from the given config.
func NewClubClient(c config) *ClubClient {
	return &ClubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `club.Hooks(f(g(h())))`.
func (c *ClubClient) Use(hooks ...Hook) {
	c.hooks.Club = append(c.hooks.Club, hooks...)
}

// Create returns a create builder for Club.
func (c *ClubClient) Create() *ClubCreate {
	mutation := newClubMutation(c.config, OpCreate)
	return &ClubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Club entities.
func (c *ClubClient) CreateBulk(builders ...*ClubCreate) *ClubCreateBulk {
	return &ClubCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Club.
func (c *ClubClient) Update() *ClubUpdate {
	mutation := newClubMutation(c.config, OpUpdate)
	return &ClubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubClient) UpdateOne(cl *Club) *ClubUpdateOne {
	mutation := newClubMutation(c.config, OpUpdateOne, withClub(cl))
	return &ClubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubClient) UpdateOneID(id int) *ClubUpdateOne {
	mutation := newClubMutation(c.config, OpUpdateOne, withClubID(id))
	return &ClubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Club.
func (c *ClubClient) Delete() *ClubDelete {
	mutation := newClubMutation(c.config, OpDelete)
	return &ClubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClubClient) DeleteOne(cl *Club) *ClubDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClubClient) DeleteOneID(id int) *ClubDeleteOne {
	builder := c.Delete().Where(club.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClubDeleteOne{builder}
}

// Query returns a query builder for Club.
func (c *ClubClient) Query() *ClubQuery {
	return &ClubQuery{
		config: c.config,
	}
}

// Get returns a Club entity by its id.
func (c *ClubClient) Get(ctx context.Context, id int) (*Club, error) {
	return c.Query().Where(club.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubClient) GetX(ctx context.Context, id int) *Club {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLeader queries the leader edge of a Club.
func (c *ClubClient) QueryLeader(cl *Club) *StudentQuery {
	query := &StudentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, club.LeaderTable, club.LeaderColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubMember queries the club_member edge of a Club.
func (c *ClubClient) QueryClubMember(cl *Club) *ClubMemberQuery {
	query := &ClubMemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(clubmember.Table, clubmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, club.ClubMemberTable, club.ClubMemberColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a Club.
func (c *ClubClient) QueryProject(cl *Club) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, club.ProjectTable, club.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectClub queries the project_club edge of a Club.
func (c *ClubClient) QueryProjectClub(cl *Club) *ProjectClubQuery {
	query := &ProjectClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(projectclub.Table, projectclub.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, club.ProjectClubTable, club.ProjectClubColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClubClient) Hooks() []Hook {
	return c.hooks.Club
}

// ClubMemberClient is a client for the ClubMember schema.
type ClubMemberClient struct {
	config
}

// NewClubMemberClient returns a client for the ClubMember from the given config.
func NewClubMemberClient(c config) *ClubMemberClient {
	return &ClubMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clubmember.Hooks(f(g(h())))`.
func (c *ClubMemberClient) Use(hooks ...Hook) {
	c.hooks.ClubMember = append(c.hooks.ClubMember, hooks...)
}

// Create returns a create builder for ClubMember.
func (c *ClubMemberClient) Create() *ClubMemberCreate {
	mutation := newClubMemberMutation(c.config, OpCreate)
	return &ClubMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ClubMember entities.
func (c *ClubMemberClient) CreateBulk(builders ...*ClubMemberCreate) *ClubMemberCreateBulk {
	return &ClubMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ClubMember.
func (c *ClubMemberClient) Update() *ClubMemberUpdate {
	mutation := newClubMemberMutation(c.config, OpUpdate)
	return &ClubMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubMemberClient) UpdateOne(cm *ClubMember) *ClubMemberUpdateOne {
	mutation := newClubMemberMutation(c.config, OpUpdateOne, withClubMember(cm))
	return &ClubMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubMemberClient) UpdateOneID(id int) *ClubMemberUpdateOne {
	mutation := newClubMemberMutation(c.config, OpUpdateOne, withClubMemberID(id))
	return &ClubMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClubMember.
func (c *ClubMemberClient) Delete() *ClubMemberDelete {
	mutation := newClubMemberMutation(c.config, OpDelete)
	return &ClubMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClubMemberClient) DeleteOne(cm *ClubMember) *ClubMemberDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClubMemberClient) DeleteOneID(id int) *ClubMemberDeleteOne {
	builder := c.Delete().Where(clubmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClubMemberDeleteOne{builder}
}

// Query returns a query builder for ClubMember.
func (c *ClubMemberClient) Query() *ClubMemberQuery {
	return &ClubMemberQuery{
		config: c.config,
	}
}

// Get returns a ClubMember entity by its id.
func (c *ClubMemberClient) Get(ctx context.Context, id int) (*ClubMember, error) {
	return c.Query().Where(clubmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubMemberClient) GetX(ctx context.Context, id int) *ClubMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudent queries the student edge of a ClubMember.
func (c *ClubMemberClient) QueryStudent(cm *ClubMember) *StudentQuery {
	query := &StudentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubmember.Table, clubmember.FieldID, id),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clubmember.StudentTable, clubmember.StudentColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClub queries the club edge of a ClubMember.
func (c *ClubMemberClient) QueryClub(cm *ClubMember) *ClubQuery {
	query := &ClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubmember.Table, clubmember.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clubmember.ClubTable, clubmember.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(cm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClubMemberClient) Hooks() []Hook {
	return c.hooks.ClubMember
}

// CompanyClient is a client for the Company schema.
type CompanyClient struct {
	config
}

// NewCompanyClient returns a client for the Company from the given config.
func NewCompanyClient(c config) *CompanyClient {
	return &CompanyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `company.Hooks(f(g(h())))`.
func (c *CompanyClient) Use(hooks ...Hook) {
	c.hooks.Company = append(c.hooks.Company, hooks...)
}

// Create returns a create builder for Company.
func (c *CompanyClient) Create() *CompanyCreate {
	mutation := newCompanyMutation(c.config, OpCreate)
	return &CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Company entities.
func (c *CompanyClient) CreateBulk(builders ...*CompanyCreate) *CompanyCreateBulk {
	return &CompanyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Company.
func (c *CompanyClient) Update() *CompanyUpdate {
	mutation := newCompanyMutation(c.config, OpUpdate)
	return &CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyClient) UpdateOne(co *Company) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompany(co))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyClient) UpdateOneID(id int) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompanyID(id))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Company.
func (c *CompanyClient) Delete() *CompanyDelete {
	mutation := newCompanyMutation(c.config, OpDelete)
	return &CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CompanyClient) DeleteOne(co *Company) *CompanyDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CompanyClient) DeleteOneID(id int) *CompanyDeleteOne {
	builder := c.Delete().Where(company.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyDeleteOne{builder}
}

// Query returns a query builder for Company.
func (c *CompanyClient) Query() *CompanyQuery {
	return &CompanyQuery{
		config: c.config,
	}
}

// Get returns a Company entity by its id.
func (c *CompanyClient) Get(ctx context.Context, id int) (*Company, error) {
	return c.Query().Where(company.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyClient) GetX(ctx context.Context, id int) *Company {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Company.
func (c *CompanyClient) QueryUser(co *Company) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, company.UserTable, company.UserColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a Company.
func (c *CompanyClient) QueryProject(co *Company) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, company.ProjectTable, company.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompanyClient) Hooks() []Hook {
	return c.hooks.Company
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Create returns a create builder for Project.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCompany queries the company edge of a Project.
func (c *ProjectClient) QueryCompany(pr *Project) *CompanyQuery {
	query := &CompanyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.CompanyTable, project.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClub queries the club edge of a Project.
func (c *ProjectClient) QueryClub(pr *Project) *ClubQuery {
	query := &ClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, project.ClubTable, project.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectClub queries the project_club edge of a Project.
func (c *ProjectClient) QueryProjectClub(pr *Project) *ProjectClubQuery {
	query := &ProjectClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectclub.Table, projectclub.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectClubTable, project.ProjectClubColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectLog queries the project_log edge of a Project.
func (c *ProjectClient) QueryProjectLog(pr *Project) *ProjectLogQuery {
	query := &ProjectLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectlog.Table, projectlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectLogTable, project.ProjectLogColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// ProjectClubClient is a client for the ProjectClub schema.
type ProjectClubClient struct {
	config
}

// NewProjectClubClient returns a client for the ProjectClub from the given config.
func NewProjectClubClient(c config) *ProjectClubClient {
	return &ProjectClubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectclub.Hooks(f(g(h())))`.
func (c *ProjectClubClient) Use(hooks ...Hook) {
	c.hooks.ProjectClub = append(c.hooks.ProjectClub, hooks...)
}

// Create returns a create builder for ProjectClub.
func (c *ProjectClubClient) Create() *ProjectClubCreate {
	mutation := newProjectClubMutation(c.config, OpCreate)
	return &ProjectClubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectClub entities.
func (c *ProjectClubClient) CreateBulk(builders ...*ProjectClubCreate) *ProjectClubCreateBulk {
	return &ProjectClubCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectClub.
func (c *ProjectClubClient) Update() *ProjectClubUpdate {
	mutation := newProjectClubMutation(c.config, OpUpdate)
	return &ProjectClubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClubClient) UpdateOne(pc *ProjectClub) *ProjectClubUpdateOne {
	mutation := newProjectClubMutation(c.config, OpUpdateOne, withProjectClub(pc))
	return &ProjectClubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClubClient) UpdateOneID(id int) *ProjectClubUpdateOne {
	mutation := newProjectClubMutation(c.config, OpUpdateOne, withProjectClubID(id))
	return &ProjectClubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectClub.
func (c *ProjectClubClient) Delete() *ProjectClubDelete {
	mutation := newProjectClubMutation(c.config, OpDelete)
	return &ProjectClubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectClubClient) DeleteOne(pc *ProjectClub) *ProjectClubDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectClubClient) DeleteOneID(id int) *ProjectClubDeleteOne {
	builder := c.Delete().Where(projectclub.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectClubDeleteOne{builder}
}

// Query returns a query builder for ProjectClub.
func (c *ProjectClubClient) Query() *ProjectClubQuery {
	return &ProjectClubQuery{
		config: c.config,
	}
}

// Get returns a ProjectClub entity by its id.
func (c *ProjectClubClient) Get(ctx context.Context, id int) (*ProjectClub, error) {
	return c.Query().Where(projectclub.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClubClient) GetX(ctx context.Context, id int) *ProjectClub {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClub queries the club edge of a ProjectClub.
func (c *ProjectClubClient) QueryClub(pc *ProjectClub) *ClubQuery {
	query := &ClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectclub.Table, projectclub.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectclub.ClubTable, projectclub.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProject queries the project edge of a ProjectClub.
func (c *ProjectClubClient) QueryProject(pc *ProjectClub) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectclub.Table, projectclub.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectclub.ProjectTable, projectclub.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectLog queries the project_log edge of a ProjectClub.
func (c *ProjectClubClient) QueryProjectLog(pc *ProjectClub) *ProjectLogQuery {
	query := &ProjectLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectclub.Table, projectclub.FieldID, id),
			sqlgraph.To(projectlog.Table, projectlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectclub.ProjectLogTable, projectclub.ProjectLogColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClubClient) Hooks() []Hook {
	return c.hooks.ProjectClub
}

// ProjectLogClient is a client for the ProjectLog schema.
type ProjectLogClient struct {
	config
}

// NewProjectLogClient returns a client for the ProjectLog from the given config.
func NewProjectLogClient(c config) *ProjectLogClient {
	return &ProjectLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectlog.Hooks(f(g(h())))`.
func (c *ProjectLogClient) Use(hooks ...Hook) {
	c.hooks.ProjectLog = append(c.hooks.ProjectLog, hooks...)
}

// Create returns a create builder for ProjectLog.
func (c *ProjectLogClient) Create() *ProjectLogCreate {
	mutation := newProjectLogMutation(c.config, OpCreate)
	return &ProjectLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectLog entities.
func (c *ProjectLogClient) CreateBulk(builders ...*ProjectLogCreate) *ProjectLogCreateBulk {
	return &ProjectLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectLog.
func (c *ProjectLogClient) Update() *ProjectLogUpdate {
	mutation := newProjectLogMutation(c.config, OpUpdate)
	return &ProjectLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectLogClient) UpdateOne(pl *ProjectLog) *ProjectLogUpdateOne {
	mutation := newProjectLogMutation(c.config, OpUpdateOne, withProjectLog(pl))
	return &ProjectLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectLogClient) UpdateOneID(id int) *ProjectLogUpdateOne {
	mutation := newProjectLogMutation(c.config, OpUpdateOne, withProjectLogID(id))
	return &ProjectLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectLog.
func (c *ProjectLogClient) Delete() *ProjectLogDelete {
	mutation := newProjectLogMutation(c.config, OpDelete)
	return &ProjectLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectLogClient) DeleteOne(pl *ProjectLog) *ProjectLogDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectLogClient) DeleteOneID(id int) *ProjectLogDeleteOne {
	builder := c.Delete().Where(projectlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectLogDeleteOne{builder}
}

// Query returns a query builder for ProjectLog.
func (c *ProjectLogClient) Query() *ProjectLogQuery {
	return &ProjectLogQuery{
		config: c.config,
	}
}

// Get returns a ProjectLog entity by its id.
func (c *ProjectLogClient) Get(ctx context.Context, id int) (*ProjectLog, error) {
	return c.Query().Where(projectlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectLogClient) GetX(ctx context.Context, id int) *ProjectLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectLog.
func (c *ProjectLogClient) QueryProject(pl *ProjectLog) *ProjectQuery {
	query := &ProjectQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlog.Table, projectlog.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectlog.ProjectTable, projectlog.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectClub queries the project_club edge of a ProjectLog.
func (c *ProjectLogClient) QueryProjectClub(pl *ProjectLog) *ProjectClubQuery {
	query := &ProjectClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlog.Table, projectlog.FieldID, id),
			sqlgraph.To(projectclub.Table, projectclub.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectlog.ProjectClubTable, projectlog.ProjectClubColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectLogParticipant queries the project_log_participant edge of a ProjectLog.
func (c *ProjectLogClient) QueryProjectLogParticipant(pl *ProjectLog) *ProjectLogParticipantQuery {
	query := &ProjectLogParticipantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlog.Table, projectlog.FieldID, id),
			sqlgraph.To(projectlogparticipant.Table, projectlogparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectlog.ProjectLogParticipantTable, projectlog.ProjectLogParticipantColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProjectLogFeedback queries the project_log_feedback edge of a ProjectLog.
func (c *ProjectLogClient) QueryProjectLogFeedback(pl *ProjectLog) *ProjectLogFeedbackQuery {
	query := &ProjectLogFeedbackQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlog.Table, projectlog.FieldID, id),
			sqlgraph.To(projectlogfeedback.Table, projectlogfeedback.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, projectlog.ProjectLogFeedbackTable, projectlog.ProjectLogFeedbackColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectLogClient) Hooks() []Hook {
	return c.hooks.ProjectLog
}

// ProjectLogFeedbackClient is a client for the ProjectLogFeedback schema.
type ProjectLogFeedbackClient struct {
	config
}

// NewProjectLogFeedbackClient returns a client for the ProjectLogFeedback from the given config.
func NewProjectLogFeedbackClient(c config) *ProjectLogFeedbackClient {
	return &ProjectLogFeedbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectlogfeedback.Hooks(f(g(h())))`.
func (c *ProjectLogFeedbackClient) Use(hooks ...Hook) {
	c.hooks.ProjectLogFeedback = append(c.hooks.ProjectLogFeedback, hooks...)
}

// Create returns a create builder for ProjectLogFeedback.
func (c *ProjectLogFeedbackClient) Create() *ProjectLogFeedbackCreate {
	mutation := newProjectLogFeedbackMutation(c.config, OpCreate)
	return &ProjectLogFeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectLogFeedback entities.
func (c *ProjectLogFeedbackClient) CreateBulk(builders ...*ProjectLogFeedbackCreate) *ProjectLogFeedbackCreateBulk {
	return &ProjectLogFeedbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectLogFeedback.
func (c *ProjectLogFeedbackClient) Update() *ProjectLogFeedbackUpdate {
	mutation := newProjectLogFeedbackMutation(c.config, OpUpdate)
	return &ProjectLogFeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectLogFeedbackClient) UpdateOne(plf *ProjectLogFeedback) *ProjectLogFeedbackUpdateOne {
	mutation := newProjectLogFeedbackMutation(c.config, OpUpdateOne, withProjectLogFeedback(plf))
	return &ProjectLogFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectLogFeedbackClient) UpdateOneID(id int) *ProjectLogFeedbackUpdateOne {
	mutation := newProjectLogFeedbackMutation(c.config, OpUpdateOne, withProjectLogFeedbackID(id))
	return &ProjectLogFeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectLogFeedback.
func (c *ProjectLogFeedbackClient) Delete() *ProjectLogFeedbackDelete {
	mutation := newProjectLogFeedbackMutation(c.config, OpDelete)
	return &ProjectLogFeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectLogFeedbackClient) DeleteOne(plf *ProjectLogFeedback) *ProjectLogFeedbackDeleteOne {
	return c.DeleteOneID(plf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectLogFeedbackClient) DeleteOneID(id int) *ProjectLogFeedbackDeleteOne {
	builder := c.Delete().Where(projectlogfeedback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectLogFeedbackDeleteOne{builder}
}

// Query returns a query builder for ProjectLogFeedback.
func (c *ProjectLogFeedbackClient) Query() *ProjectLogFeedbackQuery {
	return &ProjectLogFeedbackQuery{
		config: c.config,
	}
}

// Get returns a ProjectLogFeedback entity by its id.
func (c *ProjectLogFeedbackClient) Get(ctx context.Context, id int) (*ProjectLogFeedback, error) {
	return c.Query().Where(projectlogfeedback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectLogFeedbackClient) GetX(ctx context.Context, id int) *ProjectLogFeedback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectLog queries the project_log edge of a ProjectLogFeedback.
func (c *ProjectLogFeedbackClient) QueryProjectLog(plf *ProjectLogFeedback) *ProjectLogQuery {
	query := &ProjectLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := plf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlogfeedback.Table, projectlogfeedback.FieldID, id),
			sqlgraph.To(projectlog.Table, projectlog.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectlogfeedback.ProjectLogTable, projectlogfeedback.ProjectLogColumn),
		)
		fromV = sqlgraph.Neighbors(plf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectLogFeedbackClient) Hooks() []Hook {
	return c.hooks.ProjectLogFeedback
}

// ProjectLogParticipantClient is a client for the ProjectLogParticipant schema.
type ProjectLogParticipantClient struct {
	config
}

// NewProjectLogParticipantClient returns a client for the ProjectLogParticipant from the given config.
func NewProjectLogParticipantClient(c config) *ProjectLogParticipantClient {
	return &ProjectLogParticipantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectlogparticipant.Hooks(f(g(h())))`.
func (c *ProjectLogParticipantClient) Use(hooks ...Hook) {
	c.hooks.ProjectLogParticipant = append(c.hooks.ProjectLogParticipant, hooks...)
}

// Create returns a create builder for ProjectLogParticipant.
func (c *ProjectLogParticipantClient) Create() *ProjectLogParticipantCreate {
	mutation := newProjectLogParticipantMutation(c.config, OpCreate)
	return &ProjectLogParticipantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectLogParticipant entities.
func (c *ProjectLogParticipantClient) CreateBulk(builders ...*ProjectLogParticipantCreate) *ProjectLogParticipantCreateBulk {
	return &ProjectLogParticipantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectLogParticipant.
func (c *ProjectLogParticipantClient) Update() *ProjectLogParticipantUpdate {
	mutation := newProjectLogParticipantMutation(c.config, OpUpdate)
	return &ProjectLogParticipantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectLogParticipantClient) UpdateOne(plp *ProjectLogParticipant) *ProjectLogParticipantUpdateOne {
	mutation := newProjectLogParticipantMutation(c.config, OpUpdateOne, withProjectLogParticipant(plp))
	return &ProjectLogParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectLogParticipantClient) UpdateOneID(id int) *ProjectLogParticipantUpdateOne {
	mutation := newProjectLogParticipantMutation(c.config, OpUpdateOne, withProjectLogParticipantID(id))
	return &ProjectLogParticipantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectLogParticipant.
func (c *ProjectLogParticipantClient) Delete() *ProjectLogParticipantDelete {
	mutation := newProjectLogParticipantMutation(c.config, OpDelete)
	return &ProjectLogParticipantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProjectLogParticipantClient) DeleteOne(plp *ProjectLogParticipant) *ProjectLogParticipantDeleteOne {
	return c.DeleteOneID(plp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProjectLogParticipantClient) DeleteOneID(id int) *ProjectLogParticipantDeleteOne {
	builder := c.Delete().Where(projectlogparticipant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectLogParticipantDeleteOne{builder}
}

// Query returns a query builder for ProjectLogParticipant.
func (c *ProjectLogParticipantClient) Query() *ProjectLogParticipantQuery {
	return &ProjectLogParticipantQuery{
		config: c.config,
	}
}

// Get returns a ProjectLogParticipant entity by its id.
func (c *ProjectLogParticipantClient) Get(ctx context.Context, id int) (*ProjectLogParticipant, error) {
	return c.Query().Where(projectlogparticipant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectLogParticipantClient) GetX(ctx context.Context, id int) *ProjectLogParticipant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectLog queries the project_log edge of a ProjectLogParticipant.
func (c *ProjectLogParticipantClient) QueryProjectLog(plp *ProjectLogParticipant) *ProjectLogQuery {
	query := &ProjectLogQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := plp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectlogparticipant.Table, projectlogparticipant.FieldID, id),
			sqlgraph.To(projectlog.Table, projectlog.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectlogparticipant.ProjectLogTable, projectlogparticipant.ProjectLogColumn),
		)
		fromV = sqlgraph.Neighbors(plp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectLogParticipantClient) Hooks() []Hook {
	return c.hooks.ProjectLogParticipant
}

// StudentClient is a client for the Student schema.
type StudentClient struct {
	config
}

// NewStudentClient returns a client for the Student from the given config.
func NewStudentClient(c config) *StudentClient {
	return &StudentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `student.Hooks(f(g(h())))`.
func (c *StudentClient) Use(hooks ...Hook) {
	c.hooks.Student = append(c.hooks.Student, hooks...)
}

// Create returns a create builder for Student.
func (c *StudentClient) Create() *StudentCreate {
	mutation := newStudentMutation(c.config, OpCreate)
	return &StudentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Student entities.
func (c *StudentClient) CreateBulk(builders ...*StudentCreate) *StudentCreateBulk {
	return &StudentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Student.
func (c *StudentClient) Update() *StudentUpdate {
	mutation := newStudentMutation(c.config, OpUpdate)
	return &StudentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudentClient) UpdateOne(s *Student) *StudentUpdateOne {
	mutation := newStudentMutation(c.config, OpUpdateOne, withStudent(s))
	return &StudentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudentClient) UpdateOneID(id int) *StudentUpdateOne {
	mutation := newStudentMutation(c.config, OpUpdateOne, withStudentID(id))
	return &StudentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Student.
func (c *StudentClient) Delete() *StudentDelete {
	mutation := newStudentMutation(c.config, OpDelete)
	return &StudentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StudentClient) DeleteOne(s *Student) *StudentDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StudentClient) DeleteOneID(id int) *StudentDeleteOne {
	builder := c.Delete().Where(student.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudentDeleteOne{builder}
}

// Query returns a query builder for Student.
func (c *StudentClient) Query() *StudentQuery {
	return &StudentQuery{
		config: c.config,
	}
}

// Get returns a Student entity by its id.
func (c *StudentClient) Get(ctx context.Context, id int) (*Student, error) {
	return c.Query().Where(student.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudentClient) GetX(ctx context.Context, id int) *Student {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Student.
func (c *StudentClient) QueryUser(s *Student) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(student.Table, student.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, student.UserTable, student.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClub queries the club edge of a Student.
func (c *StudentClient) QueryClub(s *Student) *ClubQuery {
	query := &ClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(student.Table, student.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, student.ClubTable, student.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubMember queries the club_member edge of a Student.
func (c *StudentClient) QueryClubMember(s *Student) *ClubMemberQuery {
	query := &ClubMemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(student.Table, student.FieldID, id),
			sqlgraph.To(clubmember.Table, clubmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, student.ClubMemberTable, student.ClubMemberColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudentClient) Hooks() []Hook {
	return c.hooks.Student
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStudent queries the student edge of a User.
func (c *UserClient) QueryStudent(u *User) *StudentQuery {
	query := &StudentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(student.Table, student.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StudentTable, user.StudentColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompany queries the company edge of a User.
func (c *UserClient) QueryCompany(u *User) *CompanyQuery {
	query := &CompanyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CompanyTable, user.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubMember queries the club_member edge of a User.
func (c *UserClient) QueryClubMember(u *User) *ClubMemberQuery {
	query := &ClubMemberQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(clubmember.Table, clubmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ClubMemberTable, user.ClubMemberColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
