// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/clubmember"
	"github.com/Wanted-Linx/linx-backend/api/ent/student"
)

// ClubMember is the model entity for the ClubMember schema.
type ClubMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ClubID holds the value of the "club_id" field.
	ClubID int `json:"club_id,omitempty"`
	// StudentID holds the value of the "student_id" field.
	StudentID int `json:"student_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClubMemberQuery when eager-loading is set.
	Edges            ClubMemberEdges `json:"edges"`
	user_club_member *int
}

// ClubMemberEdges holds the relations/edges for other nodes in the graph.
type ClubMemberEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// Club holds the value of the club edge.
	Club *Club `json:"club,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubMemberEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// The edge student was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubMemberEdges) ClubOrErr() (*Club, error) {
	if e.loadedTypes[1] {
		if e.Club == nil {
			// The edge club was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: club.Label}
		}
		return e.Club, nil
	}
	return nil, &NotLoadedError{edge: "club"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClubMember) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case clubmember.FieldID, clubmember.FieldClubID, clubmember.FieldStudentID:
			values[i] = new(sql.NullInt64)
		case clubmember.ForeignKeys[0]: // user_club_member
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ClubMember", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClubMember fields.
func (cm *ClubMember) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clubmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case clubmember.FieldClubID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field club_id", values[i])
			} else if value.Valid {
				cm.ClubID = int(value.Int64)
			}
		case clubmember.FieldStudentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field student_id", values[i])
			} else if value.Valid {
				cm.StudentID = int(value.Int64)
			}
		case clubmember.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_club_member", value)
			} else if value.Valid {
				cm.user_club_member = new(int)
				*cm.user_club_member = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudent queries the "student" edge of the ClubMember entity.
func (cm *ClubMember) QueryStudent() *StudentQuery {
	return (&ClubMemberClient{config: cm.config}).QueryStudent(cm)
}

// QueryClub queries the "club" edge of the ClubMember entity.
func (cm *ClubMember) QueryClub() *ClubQuery {
	return (&ClubMemberClient{config: cm.config}).QueryClub(cm)
}

// Update returns a builder for updating this ClubMember.
// Note that you need to call ClubMember.Unwrap() before calling this method if this ClubMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ClubMember) Update() *ClubMemberUpdateOne {
	return (&ClubMemberClient{config: cm.config}).UpdateOne(cm)
}

// Unwrap unwraps the ClubMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ClubMember) Unwrap() *ClubMember {
	tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClubMember is not a transactional entity")
	}
	cm.config.driver = tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ClubMember) String() string {
	var builder strings.Builder
	builder.WriteString("ClubMember(")
	builder.WriteString(fmt.Sprintf("id=%v", cm.ID))
	builder.WriteString(", club_id=")
	builder.WriteString(fmt.Sprintf("%v", cm.ClubID))
	builder.WriteString(", student_id=")
	builder.WriteString(fmt.Sprintf("%v", cm.StudentID))
	builder.WriteByte(')')
	return builder.String()
}

// ClubMembers is a parsable slice of ClubMember.
type ClubMembers []*ClubMember

func (cm ClubMembers) config(cfg config) {
	for _i := range cm {
		cm[_i].config = cfg
	}
}
