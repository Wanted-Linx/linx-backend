// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/company"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate string `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate string `json:"end_date,omitempty"`
	// ApplyingStartDate holds the value of the "applying_start_date" field.
	ApplyingStartDate string `json:"applying_start_date,omitempty"`
	// ApplyingEndDate holds the value of the "applying_end_date" field.
	ApplyingEndDate string `json:"applying_end_date,omitempty"`
	// Qualification holds the value of the "qualification" field.
	Qualification string `json:"qualification,omitempty"`
	// ProfileImage holds the value of the "profile_image" field.
	ProfileImage *string `json:"profile_image,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// SponsorFee holds the value of the "sponsor_fee" field.
	SponsorFee int `json:"sponsor_fee,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges           ProjectEdges `json:"edges"`
	club_project    *int
	company_project *int
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Club holds the value of the club edge.
	Club *Club `json:"club,omitempty"`
	// ProjectClub holds the value of the project_club edge.
	ProjectClub []*ProjectClub `json:"project_club,omitempty"`
	// ProjectLog holds the value of the project_log edge.
	ProjectLog []*ProjectLog `json:"project_log,omitempty"`
	// TaskType holds the value of the task_type edge.
	TaskType []*TaskType `json:"task_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[0] {
		if e.Company == nil {
			// The edge company was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) ClubOrErr() (*Club, error) {
	if e.loadedTypes[1] {
		if e.Club == nil {
			// The edge club was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: club.Label}
		}
		return e.Club, nil
	}
	return nil, &NotLoadedError{edge: "club"}
}

// ProjectClubOrErr returns the ProjectClub value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ProjectClubOrErr() ([]*ProjectClub, error) {
	if e.loadedTypes[2] {
		return e.ProjectClub, nil
	}
	return nil, &NotLoadedError{edge: "project_club"}
}

// ProjectLogOrErr returns the ProjectLog value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ProjectLogOrErr() ([]*ProjectLog, error) {
	if e.loadedTypes[3] {
		return e.ProjectLog, nil
	}
	return nil, &NotLoadedError{edge: "project_log"}
}

// TaskTypeOrErr returns the TaskType value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) TaskTypeOrErr() ([]*TaskType, error) {
	if e.loadedTypes[4] {
		return e.TaskType, nil
	}
	return nil, &NotLoadedError{edge: "task_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldID, project.FieldSponsorFee:
			values[i] = new(sql.NullInt64)
		case project.FieldName, project.FieldContent, project.FieldStartDate, project.FieldEndDate, project.FieldApplyingStartDate, project.FieldApplyingEndDate, project.FieldQualification, project.FieldProfileImage:
			values[i] = new(sql.NullString)
		case project.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case project.ForeignKeys[0]: // club_project
			values[i] = new(sql.NullInt64)
		case project.ForeignKeys[1]: // company_project
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Project", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pr.Content = value.String
			}
		case project.FieldStartDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				pr.StartDate = value.String
			}
		case project.FieldEndDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				pr.EndDate = value.String
			}
		case project.FieldApplyingStartDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field applying_start_date", values[i])
			} else if value.Valid {
				pr.ApplyingStartDate = value.String
			}
		case project.FieldApplyingEndDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field applying_end_date", values[i])
			} else if value.Valid {
				pr.ApplyingEndDate = value.String
			}
		case project.FieldQualification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qualification", values[i])
			} else if value.Valid {
				pr.Qualification = value.String
			}
		case project.FieldProfileImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_image", values[i])
			} else if value.Valid {
				pr.ProfileImage = new(string)
				*pr.ProfileImage = value.String
			}
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldSponsorFee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sponsor_fee", values[i])
			} else if value.Valid {
				pr.SponsorFee = int(value.Int64)
			}
		case project.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field club_project", value)
			} else if value.Valid {
				pr.club_project = new(int)
				*pr.club_project = int(value.Int64)
			}
		case project.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_project", value)
			} else if value.Valid {
				pr.company_project = new(int)
				*pr.company_project = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCompany queries the "company" edge of the Project entity.
func (pr *Project) QueryCompany() *CompanyQuery {
	return (&ProjectClient{config: pr.config}).QueryCompany(pr)
}

// QueryClub queries the "club" edge of the Project entity.
func (pr *Project) QueryClub() *ClubQuery {
	return (&ProjectClient{config: pr.config}).QueryClub(pr)
}

// QueryProjectClub queries the "project_club" edge of the Project entity.
func (pr *Project) QueryProjectClub() *ProjectClubQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectClub(pr)
}

// QueryProjectLog queries the "project_log" edge of the Project entity.
func (pr *Project) QueryProjectLog() *ProjectLogQuery {
	return (&ProjectClient{config: pr.config}).QueryProjectLog(pr)
}

// QueryTaskType queries the "task_type" edge of the Project entity.
func (pr *Project) QueryTaskType() *TaskTypeQuery {
	return (&ProjectClient{config: pr.config}).QueryTaskType(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return (&ProjectClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", content=")
	builder.WriteString(pr.Content)
	builder.WriteString(", start_date=")
	builder.WriteString(pr.StartDate)
	builder.WriteString(", end_date=")
	builder.WriteString(pr.EndDate)
	builder.WriteString(", applying_start_date=")
	builder.WriteString(pr.ApplyingStartDate)
	builder.WriteString(", applying_end_date=")
	builder.WriteString(pr.ApplyingEndDate)
	builder.WriteString(", qualification=")
	builder.WriteString(pr.Qualification)
	if v := pr.ProfileImage; v != nil {
		builder.WriteString(", profile_image=")
		builder.WriteString(*v)
	}
	builder.WriteString(", created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", sponsor_fee=")
	builder.WriteString(fmt.Sprintf("%v", pr.SponsorFee))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project

func (pr Projects) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
