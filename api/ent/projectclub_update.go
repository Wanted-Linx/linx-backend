// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/predicate"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectclub"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
)

// ProjectClubUpdate is the builder for updating ProjectClub entities.
type ProjectClubUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectClubMutation
}

// Where appends a list predicates to the ProjectClubUpdate builder.
func (pcu *ProjectClubUpdate) Where(ps ...predicate.ProjectClub) *ProjectClubUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetProjectID sets the "project_id" field.
func (pcu *ProjectClubUpdate) SetProjectID(i int) *ProjectClubUpdate {
	pcu.mutation.SetProjectID(i)
	return pcu
}

// SetClubID sets the "club_id" field.
func (pcu *ProjectClubUpdate) SetClubID(i int) *ProjectClubUpdate {
	pcu.mutation.SetClubID(i)
	return pcu
}

// SetStartDate sets the "start_date" field.
func (pcu *ProjectClubUpdate) SetStartDate(s string) *ProjectClubUpdate {
	pcu.mutation.SetStartDate(s)
	return pcu
}

// SetClub sets the "club" edge to the Club entity.
func (pcu *ProjectClubUpdate) SetClub(c *Club) *ProjectClubUpdate {
	return pcu.SetClubID(c.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (pcu *ProjectClubUpdate) SetProject(p *Project) *ProjectClubUpdate {
	return pcu.SetProjectID(p.ID)
}

// AddProjectLogIDs adds the "project_log" edge to the ProjectLog entity by IDs.
func (pcu *ProjectClubUpdate) AddProjectLogIDs(ids ...int) *ProjectClubUpdate {
	pcu.mutation.AddProjectLogIDs(ids...)
	return pcu
}

// AddProjectLog adds the "project_log" edges to the ProjectLog entity.
func (pcu *ProjectClubUpdate) AddProjectLog(p ...*ProjectLog) *ProjectClubUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddProjectLogIDs(ids...)
}

// Mutation returns the ProjectClubMutation object of the builder.
func (pcu *ProjectClubUpdate) Mutation() *ProjectClubMutation {
	return pcu.mutation
}

// ClearClub clears the "club" edge to the Club entity.
func (pcu *ProjectClubUpdate) ClearClub() *ProjectClubUpdate {
	pcu.mutation.ClearClub()
	return pcu
}

// ClearProject clears the "project" edge to the Project entity.
func (pcu *ProjectClubUpdate) ClearProject() *ProjectClubUpdate {
	pcu.mutation.ClearProject()
	return pcu
}

// ClearProjectLog clears all "project_log" edges to the ProjectLog entity.
func (pcu *ProjectClubUpdate) ClearProjectLog() *ProjectClubUpdate {
	pcu.mutation.ClearProjectLog()
	return pcu
}

// RemoveProjectLogIDs removes the "project_log" edge to ProjectLog entities by IDs.
func (pcu *ProjectClubUpdate) RemoveProjectLogIDs(ids ...int) *ProjectClubUpdate {
	pcu.mutation.RemoveProjectLogIDs(ids...)
	return pcu
}

// RemoveProjectLog removes "project_log" edges to ProjectLog entities.
func (pcu *ProjectClubUpdate) RemoveProjectLog(p ...*ProjectLog) *ProjectClubUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemoveProjectLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProjectClubUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pcu.hooks) == 0 {
		if err = pcu.check(); err != nil {
			return 0, err
		}
		affected, err = pcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcu.check(); err != nil {
				return 0, err
			}
			pcu.mutation = mutation
			affected, err = pcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcu.hooks) - 1; i >= 0; i-- {
			if pcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProjectClubUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProjectClubUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProjectClubUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *ProjectClubUpdate) check() error {
	if _, ok := pcu.mutation.ClubID(); pcu.mutation.ClubCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"club\"")
	}
	if _, ok := pcu.mutation.ProjectID(); pcu.mutation.ProjectCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"project\"")
	}
	return nil
}

func (pcu *ProjectClubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectclub.Table,
			Columns: projectclub.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectclub.FieldID,
			},
		},
	}
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectclub.FieldStartDate,
		})
	}
	if pcu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ClubTable,
			Columns: []string{projectclub.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ClubTable,
			Columns: []string{projectclub.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ProjectTable,
			Columns: []string{projectclub.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ProjectTable,
			Columns: []string{projectclub.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectclub.ProjectLogTable,
			Columns: []string{projectclub.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedProjectLogIDs(); len(nodes) > 0 && !pcu.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectclub.ProjectLogTable,
			Columns: []string{projectclub.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProjectLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectclub.ProjectLogTable,
			Columns: []string{projectclub.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectclub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProjectClubUpdateOne is the builder for updating a single ProjectClub entity.
type ProjectClubUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectClubMutation
}

// SetProjectID sets the "project_id" field.
func (pcuo *ProjectClubUpdateOne) SetProjectID(i int) *ProjectClubUpdateOne {
	pcuo.mutation.SetProjectID(i)
	return pcuo
}

// SetClubID sets the "club_id" field.
func (pcuo *ProjectClubUpdateOne) SetClubID(i int) *ProjectClubUpdateOne {
	pcuo.mutation.SetClubID(i)
	return pcuo
}

// SetStartDate sets the "start_date" field.
func (pcuo *ProjectClubUpdateOne) SetStartDate(s string) *ProjectClubUpdateOne {
	pcuo.mutation.SetStartDate(s)
	return pcuo
}

// SetClub sets the "club" edge to the Club entity.
func (pcuo *ProjectClubUpdateOne) SetClub(c *Club) *ProjectClubUpdateOne {
	return pcuo.SetClubID(c.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (pcuo *ProjectClubUpdateOne) SetProject(p *Project) *ProjectClubUpdateOne {
	return pcuo.SetProjectID(p.ID)
}

// AddProjectLogIDs adds the "project_log" edge to the ProjectLog entity by IDs.
func (pcuo *ProjectClubUpdateOne) AddProjectLogIDs(ids ...int) *ProjectClubUpdateOne {
	pcuo.mutation.AddProjectLogIDs(ids...)
	return pcuo
}

// AddProjectLog adds the "project_log" edges to the ProjectLog entity.
func (pcuo *ProjectClubUpdateOne) AddProjectLog(p ...*ProjectLog) *ProjectClubUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddProjectLogIDs(ids...)
}

// Mutation returns the ProjectClubMutation object of the builder.
func (pcuo *ProjectClubUpdateOne) Mutation() *ProjectClubMutation {
	return pcuo.mutation
}

// ClearClub clears the "club" edge to the Club entity.
func (pcuo *ProjectClubUpdateOne) ClearClub() *ProjectClubUpdateOne {
	pcuo.mutation.ClearClub()
	return pcuo
}

// ClearProject clears the "project" edge to the Project entity.
func (pcuo *ProjectClubUpdateOne) ClearProject() *ProjectClubUpdateOne {
	pcuo.mutation.ClearProject()
	return pcuo
}

// ClearProjectLog clears all "project_log" edges to the ProjectLog entity.
func (pcuo *ProjectClubUpdateOne) ClearProjectLog() *ProjectClubUpdateOne {
	pcuo.mutation.ClearProjectLog()
	return pcuo
}

// RemoveProjectLogIDs removes the "project_log" edge to ProjectLog entities by IDs.
func (pcuo *ProjectClubUpdateOne) RemoveProjectLogIDs(ids ...int) *ProjectClubUpdateOne {
	pcuo.mutation.RemoveProjectLogIDs(ids...)
	return pcuo
}

// RemoveProjectLog removes "project_log" edges to ProjectLog entities.
func (pcuo *ProjectClubUpdateOne) RemoveProjectLog(p ...*ProjectLog) *ProjectClubUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemoveProjectLogIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProjectClubUpdateOne) Select(field string, fields ...string) *ProjectClubUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProjectClub entity.
func (pcuo *ProjectClubUpdateOne) Save(ctx context.Context) (*ProjectClub, error) {
	var (
		err  error
		node *ProjectClub
	)
	if len(pcuo.hooks) == 0 {
		if err = pcuo.check(); err != nil {
			return nil, err
		}
		node, err = pcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcuo.check(); err != nil {
				return nil, err
			}
			pcuo.mutation = mutation
			node, err = pcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcuo.hooks) - 1; i >= 0; i-- {
			if pcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProjectClubUpdateOne) SaveX(ctx context.Context) *ProjectClub {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProjectClubUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProjectClubUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *ProjectClubUpdateOne) check() error {
	if _, ok := pcuo.mutation.ClubID(); pcuo.mutation.ClubCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"club\"")
	}
	if _, ok := pcuo.mutation.ProjectID(); pcuo.mutation.ProjectCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"project\"")
	}
	return nil
}

func (pcuo *ProjectClubUpdateOne) sqlSave(ctx context.Context) (_node *ProjectClub, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   projectclub.Table,
			Columns: projectclub.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectclub.FieldID,
			},
		},
	}
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProjectClub.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectclub.FieldID)
		for _, f := range fields {
			if !projectclub.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectclub.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectclub.FieldStartDate,
		})
	}
	if pcuo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ClubTable,
			Columns: []string{projectclub.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ClubTable,
			Columns: []string{projectclub.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ProjectTable,
			Columns: []string{projectclub.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ProjectTable,
			Columns: []string{projectclub.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectclub.ProjectLogTable,
			Columns: []string{projectclub.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedProjectLogIDs(); len(nodes) > 0 && !pcuo.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectclub.ProjectLogTable,
			Columns: []string{projectclub.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProjectLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectclub.ProjectLogTable,
			Columns: []string{projectclub.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectClub{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectclub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
