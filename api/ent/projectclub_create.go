// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectclub"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
)

// ProjectClubCreate is the builder for creating a ProjectClub entity.
type ProjectClubCreate struct {
	config
	mutation *ProjectClubMutation
	hooks    []Hook
}

// SetClubID sets the "club_id" field.
func (pcc *ProjectClubCreate) SetClubID(i int) *ProjectClubCreate {
	pcc.mutation.SetClubID(i)
	return pcc
}

// SetProjectID sets the "project_id" field.
func (pcc *ProjectClubCreate) SetProjectID(i int) *ProjectClubCreate {
	pcc.mutation.SetProjectID(i)
	return pcc
}

// SetStartDate sets the "start_date" field.
func (pcc *ProjectClubCreate) SetStartDate(s string) *ProjectClubCreate {
	pcc.mutation.SetStartDate(s)
	return pcc
}

// SetClub sets the "club" edge to the Club entity.
func (pcc *ProjectClubCreate) SetClub(c *Club) *ProjectClubCreate {
	return pcc.SetClubID(c.ID)
}

// SetProject sets the "project" edge to the Project entity.
func (pcc *ProjectClubCreate) SetProject(p *Project) *ProjectClubCreate {
	return pcc.SetProjectID(p.ID)
}

// AddProjectLogIDs adds the "project_log" edge to the ProjectLog entity by IDs.
func (pcc *ProjectClubCreate) AddProjectLogIDs(ids ...int) *ProjectClubCreate {
	pcc.mutation.AddProjectLogIDs(ids...)
	return pcc
}

// AddProjectLog adds the "project_log" edges to the ProjectLog entity.
func (pcc *ProjectClubCreate) AddProjectLog(p ...*ProjectLog) *ProjectClubCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddProjectLogIDs(ids...)
}

// Mutation returns the ProjectClubMutation object of the builder.
func (pcc *ProjectClubCreate) Mutation() *ProjectClubMutation {
	return pcc.mutation
}

// Save creates the ProjectClub in the database.
func (pcc *ProjectClubCreate) Save(ctx context.Context) (*ProjectClub, error) {
	var (
		err  error
		node *ProjectClub
	)
	if len(pcc.hooks) == 0 {
		if err = pcc.check(); err != nil {
			return nil, err
		}
		node, err = pcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcc.check(); err != nil {
				return nil, err
			}
			pcc.mutation = mutation
			if node, err = pcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcc.hooks) - 1; i >= 0; i-- {
			if pcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *ProjectClubCreate) SaveX(ctx context.Context) *ProjectClub {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *ProjectClubCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *ProjectClubCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *ProjectClubCreate) check() error {
	if _, ok := pcc.mutation.ClubID(); !ok {
		return &ValidationError{Name: "club_id", err: errors.New(`ent: missing required field "club_id"`)}
	}
	if _, ok := pcc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "project_id"`)}
	}
	if _, ok := pcc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "start_date"`)}
	}
	if _, ok := pcc.mutation.ClubID(); !ok {
		return &ValidationError{Name: "club", err: errors.New("ent: missing required edge \"club\"")}
	}
	if _, ok := pcc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New("ent: missing required edge \"project\"")}
	}
	return nil
}

func (pcc *ProjectClubCreate) sqlSave(ctx context.Context) (*ProjectClub, error) {
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pcc *ProjectClubCreate) createSpec() (*ProjectClub, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectClub{config: pcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: projectclub.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: projectclub.FieldID,
			},
		}
	)
	if value, ok := pcc.mutation.StartDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: projectclub.FieldStartDate,
		})
		_node.StartDate = value
	}
	if nodes := pcc.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ClubTable,
			Columns: []string{projectclub.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClubID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectclub.ProjectTable,
			Columns: []string{projectclub.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.ProjectLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   projectclub.ProjectLogTable,
			Columns: []string{projectclub.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectClubCreateBulk is the builder for creating many ProjectClub entities in bulk.
type ProjectClubCreateBulk struct {
	config
	builders []*ProjectClubCreate
}

// Save creates the ProjectClub entities in the database.
func (pccb *ProjectClubCreateBulk) Save(ctx context.Context) ([]*ProjectClub, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*ProjectClub, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectClubMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *ProjectClubCreateBulk) SaveX(ctx context.Context) []*ProjectClub {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *ProjectClubCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *ProjectClubCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
