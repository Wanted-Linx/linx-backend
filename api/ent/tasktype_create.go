// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/company"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/student"
	"github.com/Wanted-Linx/linx-backend/api/ent/tasktype"
)

// TaskTypeCreate is the builder for creating a TaskType entity.
type TaskTypeCreate struct {
	config
	mutation *TaskTypeMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (ttc *TaskTypeCreate) SetType(s string) *TaskTypeCreate {
	ttc.mutation.SetType(s)
	return ttc
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (ttc *TaskTypeCreate) SetStudentID(id int) *TaskTypeCreate {
	ttc.mutation.SetStudentID(id)
	return ttc
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (ttc *TaskTypeCreate) SetNillableStudentID(id *int) *TaskTypeCreate {
	if id != nil {
		ttc = ttc.SetStudentID(*id)
	}
	return ttc
}

// SetStudent sets the "student" edge to the Student entity.
func (ttc *TaskTypeCreate) SetStudent(s *Student) *TaskTypeCreate {
	return ttc.SetStudentID(s.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (ttc *TaskTypeCreate) SetClubID(id int) *TaskTypeCreate {
	ttc.mutation.SetClubID(id)
	return ttc
}

// SetNillableClubID sets the "club" edge to the Club entity by ID if the given value is not nil.
func (ttc *TaskTypeCreate) SetNillableClubID(id *int) *TaskTypeCreate {
	if id != nil {
		ttc = ttc.SetClubID(*id)
	}
	return ttc
}

// SetClub sets the "club" edge to the Club entity.
func (ttc *TaskTypeCreate) SetClub(c *Club) *TaskTypeCreate {
	return ttc.SetClubID(c.ID)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (ttc *TaskTypeCreate) SetCompanyID(id int) *TaskTypeCreate {
	ttc.mutation.SetCompanyID(id)
	return ttc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (ttc *TaskTypeCreate) SetNillableCompanyID(id *int) *TaskTypeCreate {
	if id != nil {
		ttc = ttc.SetCompanyID(*id)
	}
	return ttc
}

// SetCompany sets the "company" edge to the Company entity.
func (ttc *TaskTypeCreate) SetCompany(c *Company) *TaskTypeCreate {
	return ttc.SetCompanyID(c.ID)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ttc *TaskTypeCreate) SetProjectID(id int) *TaskTypeCreate {
	ttc.mutation.SetProjectID(id)
	return ttc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ttc *TaskTypeCreate) SetNillableProjectID(id *int) *TaskTypeCreate {
	if id != nil {
		ttc = ttc.SetProjectID(*id)
	}
	return ttc
}

// SetProject sets the "project" edge to the Project entity.
func (ttc *TaskTypeCreate) SetProject(p *Project) *TaskTypeCreate {
	return ttc.SetProjectID(p.ID)
}

// Mutation returns the TaskTypeMutation object of the builder.
func (ttc *TaskTypeCreate) Mutation() *TaskTypeMutation {
	return ttc.mutation
}

// Save creates the TaskType in the database.
func (ttc *TaskTypeCreate) Save(ctx context.Context) (*TaskType, error) {
	var (
		err  error
		node *TaskType
	)
	if len(ttc.hooks) == 0 {
		if err = ttc.check(); err != nil {
			return nil, err
		}
		node, err = ttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ttc.check(); err != nil {
				return nil, err
			}
			ttc.mutation = mutation
			if node, err = ttc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ttc.hooks) - 1; i >= 0; i-- {
			if ttc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ttc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TaskTypeCreate) SaveX(ctx context.Context) *TaskType {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TaskTypeCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TaskTypeCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TaskTypeCreate) check() error {
	if _, ok := ttc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	return nil
}

func (ttc *TaskTypeCreate) sqlSave(ctx context.Context) (*TaskType, error) {
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ttc *TaskTypeCreate) createSpec() (*TaskType, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskType{config: ttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tasktype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tasktype.FieldID,
			},
		}
	)
	if value, ok := ttc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktype.FieldType,
		})
		_node.Type = value
	}
	if nodes := ttc.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.StudentTable,
			Columns: []string{tasktype.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.student_task_type = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ClubTable,
			Columns: []string{tasktype.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.club_task_type = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.CompanyTable,
			Columns: []string{tasktype.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_task_type = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tasktype.ProjectTable,
			Columns: []string{tasktype.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_task_type = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskTypeCreateBulk is the builder for creating many TaskType entities in bulk.
type TaskTypeCreateBulk struct {
	config
	builders []*TaskTypeCreate
}

// Save creates the TaskType entities in the database.
func (ttcb *TaskTypeCreateBulk) Save(ctx context.Context) ([]*TaskType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TaskType, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TaskTypeCreateBulk) SaveX(ctx context.Context) []*TaskType {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TaskTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TaskTypeCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
