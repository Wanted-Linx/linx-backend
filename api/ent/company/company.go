// Code generated by entc, DO NOT EDIT.

package company

const (
	// Label holds the string label denoting the company type in the database.
	Label = "company"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBusinessNumber holds the string denoting the business_number field in the database.
	FieldBusinessNumber = "business_number"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldProfileImage holds the string denoting the profile_image field in the database.
	FieldProfileImage = "profile_image"
	// FieldHompage holds the string denoting the hompage field in the database.
	FieldHompage = "hompage"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeTaskType holds the string denoting the task_type edge name in mutations.
	EdgeTaskType = "task_type"
	// Table holds the table name of the company in the database.
	Table = "companies"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "companies"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_company"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "projects"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "company_project"
	// TaskTypeTable is the table that holds the task_type relation/edge.
	TaskTypeTable = "task_types"
	// TaskTypeInverseTable is the table name for the TaskType entity.
	// It exists in this package in order to avoid circular dependency with the "tasktype" package.
	TaskTypeInverseTable = "task_types"
	// TaskTypeColumn is the table column denoting the task_type relation/edge.
	TaskTypeColumn = "company_task_type"
)

// Columns holds all SQL columns for company fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldBusinessNumber,
	FieldAddress,
	FieldDescription,
	FieldProfileImage,
	FieldHompage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "companies"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_company",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
