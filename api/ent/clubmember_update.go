// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/clubmember"
	"github.com/Wanted-Linx/linx-backend/api/ent/predicate"
	"github.com/Wanted-Linx/linx-backend/api/ent/student"
)

// ClubMemberUpdate is the builder for updating ClubMember entities.
type ClubMemberUpdate struct {
	config
	hooks    []Hook
	mutation *ClubMemberMutation
}

// Where appends a list predicates to the ClubMemberUpdate builder.
func (cmu *ClubMemberUpdate) Where(ps ...predicate.ClubMember) *ClubMemberUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetClubID sets the "club_id" field.
func (cmu *ClubMemberUpdate) SetClubID(i int) *ClubMemberUpdate {
	cmu.mutation.SetClubID(i)
	return cmu
}

// SetStudentID sets the "student_id" field.
func (cmu *ClubMemberUpdate) SetStudentID(i int) *ClubMemberUpdate {
	cmu.mutation.SetStudentID(i)
	return cmu
}

// SetStudent sets the "student" edge to the Student entity.
func (cmu *ClubMemberUpdate) SetStudent(s *Student) *ClubMemberUpdate {
	return cmu.SetStudentID(s.ID)
}

// SetClub sets the "club" edge to the Club entity.
func (cmu *ClubMemberUpdate) SetClub(c *Club) *ClubMemberUpdate {
	return cmu.SetClubID(c.ID)
}

// Mutation returns the ClubMemberMutation object of the builder.
func (cmu *ClubMemberUpdate) Mutation() *ClubMemberMutation {
	return cmu.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (cmu *ClubMemberUpdate) ClearStudent() *ClubMemberUpdate {
	cmu.mutation.ClearStudent()
	return cmu
}

// ClearClub clears the "club" edge to the Club entity.
func (cmu *ClubMemberUpdate) ClearClub() *ClubMemberUpdate {
	cmu.mutation.ClearClub()
	return cmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ClubMemberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cmu.hooks) == 0 {
		if err = cmu.check(); err != nil {
			return 0, err
		}
		affected, err = cmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmu.check(); err != nil {
				return 0, err
			}
			cmu.mutation = mutation
			affected, err = cmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmu.hooks) - 1; i >= 0; i-- {
			if cmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ClubMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ClubMemberUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ClubMemberUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmu *ClubMemberUpdate) check() error {
	if _, ok := cmu.mutation.StudentID(); cmu.mutation.StudentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"student\"")
	}
	if _, ok := cmu.mutation.ClubID(); cmu.mutation.ClubCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"club\"")
	}
	return nil
}

func (cmu *ClubMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   clubmember.Table,
			Columns: clubmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: clubmember.FieldID,
			},
		},
	}
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cmu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.StudentTable,
			Columns: []string{clubmember.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.StudentTable,
			Columns: []string{clubmember.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.ClubTable,
			Columns: []string{clubmember.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.ClubTable,
			Columns: []string{clubmember.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clubmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ClubMemberUpdateOne is the builder for updating a single ClubMember entity.
type ClubMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClubMemberMutation
}

// SetClubID sets the "club_id" field.
func (cmuo *ClubMemberUpdateOne) SetClubID(i int) *ClubMemberUpdateOne {
	cmuo.mutation.SetClubID(i)
	return cmuo
}

// SetStudentID sets the "student_id" field.
func (cmuo *ClubMemberUpdateOne) SetStudentID(i int) *ClubMemberUpdateOne {
	cmuo.mutation.SetStudentID(i)
	return cmuo
}

// SetStudent sets the "student" edge to the Student entity.
func (cmuo *ClubMemberUpdateOne) SetStudent(s *Student) *ClubMemberUpdateOne {
	return cmuo.SetStudentID(s.ID)
}

// SetClub sets the "club" edge to the Club entity.
func (cmuo *ClubMemberUpdateOne) SetClub(c *Club) *ClubMemberUpdateOne {
	return cmuo.SetClubID(c.ID)
}

// Mutation returns the ClubMemberMutation object of the builder.
func (cmuo *ClubMemberUpdateOne) Mutation() *ClubMemberMutation {
	return cmuo.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (cmuo *ClubMemberUpdateOne) ClearStudent() *ClubMemberUpdateOne {
	cmuo.mutation.ClearStudent()
	return cmuo
}

// ClearClub clears the "club" edge to the Club entity.
func (cmuo *ClubMemberUpdateOne) ClearClub() *ClubMemberUpdateOne {
	cmuo.mutation.ClearClub()
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ClubMemberUpdateOne) Select(field string, fields ...string) *ClubMemberUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ClubMember entity.
func (cmuo *ClubMemberUpdateOne) Save(ctx context.Context) (*ClubMember, error) {
	var (
		err  error
		node *ClubMember
	)
	if len(cmuo.hooks) == 0 {
		if err = cmuo.check(); err != nil {
			return nil, err
		}
		node, err = cmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmuo.check(); err != nil {
				return nil, err
			}
			cmuo.mutation = mutation
			node, err = cmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmuo.hooks) - 1; i >= 0; i-- {
			if cmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ClubMemberUpdateOne) SaveX(ctx context.Context) *ClubMember {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ClubMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ClubMemberUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmuo *ClubMemberUpdateOne) check() error {
	if _, ok := cmuo.mutation.StudentID(); cmuo.mutation.StudentCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"student\"")
	}
	if _, ok := cmuo.mutation.ClubID(); cmuo.mutation.ClubCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"club\"")
	}
	return nil
}

func (cmuo *ClubMemberUpdateOne) sqlSave(ctx context.Context) (_node *ClubMember, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   clubmember.Table,
			Columns: clubmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: clubmember.FieldID,
			},
		},
	}
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ClubMember.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clubmember.FieldID)
		for _, f := range fields {
			if !clubmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clubmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cmuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.StudentTable,
			Columns: []string{clubmember.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.StudentTable,
			Columns: []string{clubmember.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.ClubTable,
			Columns: []string{clubmember.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubmember.ClubTable,
			Columns: []string{clubmember.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClubMember{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clubmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
