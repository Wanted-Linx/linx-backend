// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/company"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/student"
	"github.com/Wanted-Linx/linx-backend/api/ent/tasktype"
)

// TaskType is the model entity for the TaskType schema.
type TaskType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskTypeQuery when eager-loading is set.
	Edges             TaskTypeEdges `json:"edges"`
	club_task_type    *int
	company_task_type *int
	project_task_type *int
	student_task_type *int
}

// TaskTypeEdges holds the relations/edges for other nodes in the graph.
type TaskTypeEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// Club holds the value of the club edge.
	Club *Club `json:"club,omitempty"`
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskTypeEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// The edge student was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskTypeEdges) ClubOrErr() (*Club, error) {
	if e.loadedTypes[1] {
		if e.Club == nil {
			// The edge club was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: club.Label}
		}
		return e.Club, nil
	}
	return nil, &NotLoadedError{edge: "club"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskTypeEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[2] {
		if e.Company == nil {
			// The edge company was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskTypeEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[3] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tasktype.FieldID:
			values[i] = new(sql.NullInt64)
		case tasktype.FieldType:
			values[i] = new(sql.NullString)
		case tasktype.ForeignKeys[0]: // club_task_type
			values[i] = new(sql.NullInt64)
		case tasktype.ForeignKeys[1]: // company_task_type
			values[i] = new(sql.NullInt64)
		case tasktype.ForeignKeys[2]: // project_task_type
			values[i] = new(sql.NullInt64)
		case tasktype.ForeignKeys[3]: // student_task_type
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TaskType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskType fields.
func (tt *TaskType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tasktype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tt.ID = int(value.Int64)
		case tasktype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				tt.Type = value.String
			}
		case tasktype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field club_task_type", value)
			} else if value.Valid {
				tt.club_task_type = new(int)
				*tt.club_task_type = int(value.Int64)
			}
		case tasktype.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_task_type", value)
			} else if value.Valid {
				tt.company_task_type = new(int)
				*tt.company_task_type = int(value.Int64)
			}
		case tasktype.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_task_type", value)
			} else if value.Valid {
				tt.project_task_type = new(int)
				*tt.project_task_type = int(value.Int64)
			}
		case tasktype.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field student_task_type", value)
			} else if value.Valid {
				tt.student_task_type = new(int)
				*tt.student_task_type = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudent queries the "student" edge of the TaskType entity.
func (tt *TaskType) QueryStudent() *StudentQuery {
	return (&TaskTypeClient{config: tt.config}).QueryStudent(tt)
}

// QueryClub queries the "club" edge of the TaskType entity.
func (tt *TaskType) QueryClub() *ClubQuery {
	return (&TaskTypeClient{config: tt.config}).QueryClub(tt)
}

// QueryCompany queries the "company" edge of the TaskType entity.
func (tt *TaskType) QueryCompany() *CompanyQuery {
	return (&TaskTypeClient{config: tt.config}).QueryCompany(tt)
}

// QueryProject queries the "project" edge of the TaskType entity.
func (tt *TaskType) QueryProject() *ProjectQuery {
	return (&TaskTypeClient{config: tt.config}).QueryProject(tt)
}

// Update returns a builder for updating this TaskType.
// Note that you need to call TaskType.Unwrap() before calling this method if this TaskType
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TaskType) Update() *TaskTypeUpdateOne {
	return (&TaskTypeClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the TaskType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TaskType) Unwrap() *TaskType {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskType is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TaskType) String() string {
	var builder strings.Builder
	builder.WriteString("TaskType(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteString(", type=")
	builder.WriteString(tt.Type)
	builder.WriteByte(')')
	return builder.String()
}

// TaskTypes is a parsable slice of TaskType.
type TaskTypes []*TaskType

func (tt TaskTypes) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
