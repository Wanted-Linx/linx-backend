// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogparticipant"
)

// ProjectLogParticipant is the model entity for the ProjectLogParticipant schema.
type ProjectLogParticipant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectLogParticipantQuery when eager-loading is set.
	Edges                               ProjectLogParticipantEdges `json:"edges"`
	project_log_project_log_participant *int
}

// ProjectLogParticipantEdges holds the relations/edges for other nodes in the graph.
type ProjectLogParticipantEdges struct {
	// ProjectLog holds the value of the project_log edge.
	ProjectLog *ProjectLog `json:"project_log,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectLogOrErr returns the ProjectLog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectLogParticipantEdges) ProjectLogOrErr() (*ProjectLog, error) {
	if e.loadedTypes[0] {
		if e.ProjectLog == nil {
			// The edge project_log was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: projectlog.Label}
		}
		return e.ProjectLog, nil
	}
	return nil, &NotLoadedError{edge: "project_log"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectLogParticipant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectlogparticipant.FieldID:
			values[i] = new(sql.NullInt64)
		case projectlogparticipant.FieldName:
			values[i] = new(sql.NullString)
		case projectlogparticipant.ForeignKeys[0]: // project_log_project_log_participant
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectLogParticipant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectLogParticipant fields.
func (plp *ProjectLogParticipant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectlogparticipant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			plp.ID = int(value.Int64)
		case projectlogparticipant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				plp.Name = value.String
			}
		case projectlogparticipant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_log_project_log_participant", value)
			} else if value.Valid {
				plp.project_log_project_log_participant = new(int)
				*plp.project_log_project_log_participant = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProjectLog queries the "project_log" edge of the ProjectLogParticipant entity.
func (plp *ProjectLogParticipant) QueryProjectLog() *ProjectLogQuery {
	return (&ProjectLogParticipantClient{config: plp.config}).QueryProjectLog(plp)
}

// Update returns a builder for updating this ProjectLogParticipant.
// Note that you need to call ProjectLogParticipant.Unwrap() before calling this method if this ProjectLogParticipant
// was returned from a transaction, and the transaction was committed or rolled back.
func (plp *ProjectLogParticipant) Update() *ProjectLogParticipantUpdateOne {
	return (&ProjectLogParticipantClient{config: plp.config}).UpdateOne(plp)
}

// Unwrap unwraps the ProjectLogParticipant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (plp *ProjectLogParticipant) Unwrap() *ProjectLogParticipant {
	tx, ok := plp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectLogParticipant is not a transactional entity")
	}
	plp.config.driver = tx.drv
	return plp
}

// String implements the fmt.Stringer.
func (plp *ProjectLogParticipant) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectLogParticipant(")
	builder.WriteString(fmt.Sprintf("id=%v", plp.ID))
	builder.WriteString(", name=")
	builder.WriteString(plp.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ProjectLogParticipants is a parsable slice of ProjectLogParticipant.
type ProjectLogParticipants []*ProjectLogParticipant

func (plp ProjectLogParticipants) config(cfg config) {
	for _i := range plp {
		plp[_i].config = cfg
	}
}
