// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Wanted-Linx/linx-backend/api/ent/club"
	"github.com/Wanted-Linx/linx-backend/api/ent/company"
	"github.com/Wanted-Linx/linx-backend/api/ent/predicate"
	"github.com/Wanted-Linx/linx-backend/api/ent/project"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectclub"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetContent sets the "content" field.
func (pu *ProjectUpdate) SetContent(s string) *ProjectUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetStartDate sets the "start_date" field.
func (pu *ProjectUpdate) SetStartDate(s string) *ProjectUpdate {
	pu.mutation.SetStartDate(s)
	return pu
}

// SetEndDate sets the "end_date" field.
func (pu *ProjectUpdate) SetEndDate(s string) *ProjectUpdate {
	pu.mutation.SetEndDate(s)
	return pu
}

// SetApplyingStartDate sets the "applying_start_date" field.
func (pu *ProjectUpdate) SetApplyingStartDate(s string) *ProjectUpdate {
	pu.mutation.SetApplyingStartDate(s)
	return pu
}

// SetApplyingEndDate sets the "applying_end_date" field.
func (pu *ProjectUpdate) SetApplyingEndDate(s string) *ProjectUpdate {
	pu.mutation.SetApplyingEndDate(s)
	return pu
}

// SetQualification sets the "qualification" field.
func (pu *ProjectUpdate) SetQualification(s string) *ProjectUpdate {
	pu.mutation.SetQualification(s)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProjectUpdate) SetCreatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableCreatedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetSponsorFee sets the "sponsor_fee" field.
func (pu *ProjectUpdate) SetSponsorFee(i int) *ProjectUpdate {
	pu.mutation.ResetSponsorFee()
	pu.mutation.SetSponsorFee(i)
	return pu
}

// AddSponsorFee adds i to the "sponsor_fee" field.
func (pu *ProjectUpdate) AddSponsorFee(i int) *ProjectUpdate {
	pu.mutation.AddSponsorFee(i)
	return pu
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (pu *ProjectUpdate) SetCompanyID(id int) *ProjectUpdate {
	pu.mutation.SetCompanyID(id)
	return pu
}

// SetCompany sets the "company" edge to the Company entity.
func (pu *ProjectUpdate) SetCompany(c *Company) *ProjectUpdate {
	return pu.SetCompanyID(c.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (pu *ProjectUpdate) SetClubID(id int) *ProjectUpdate {
	pu.mutation.SetClubID(id)
	return pu
}

// SetClub sets the "club" edge to the Club entity.
func (pu *ProjectUpdate) SetClub(c *Club) *ProjectUpdate {
	return pu.SetClubID(c.ID)
}

// AddProjectClubIDs adds the "project_club" edge to the ProjectClub entity by IDs.
func (pu *ProjectUpdate) AddProjectClubIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddProjectClubIDs(ids...)
	return pu
}

// AddProjectClub adds the "project_club" edges to the ProjectClub entity.
func (pu *ProjectUpdate) AddProjectClub(p ...*ProjectClub) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProjectClubIDs(ids...)
}

// AddProjectLogIDs adds the "project_log" edge to the ProjectLog entity by IDs.
func (pu *ProjectUpdate) AddProjectLogIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddProjectLogIDs(ids...)
	return pu
}

// AddProjectLog adds the "project_log" edges to the ProjectLog entity.
func (pu *ProjectUpdate) AddProjectLog(p ...*ProjectLog) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProjectLogIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (pu *ProjectUpdate) ClearCompany() *ProjectUpdate {
	pu.mutation.ClearCompany()
	return pu
}

// ClearClub clears the "club" edge to the Club entity.
func (pu *ProjectUpdate) ClearClub() *ProjectUpdate {
	pu.mutation.ClearClub()
	return pu
}

// ClearProjectClub clears all "project_club" edges to the ProjectClub entity.
func (pu *ProjectUpdate) ClearProjectClub() *ProjectUpdate {
	pu.mutation.ClearProjectClub()
	return pu
}

// RemoveProjectClubIDs removes the "project_club" edge to ProjectClub entities by IDs.
func (pu *ProjectUpdate) RemoveProjectClubIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveProjectClubIDs(ids...)
	return pu
}

// RemoveProjectClub removes "project_club" edges to ProjectClub entities.
func (pu *ProjectUpdate) RemoveProjectClub(p ...*ProjectClub) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProjectClubIDs(ids...)
}

// ClearProjectLog clears all "project_log" edges to the ProjectLog entity.
func (pu *ProjectUpdate) ClearProjectLog() *ProjectUpdate {
	pu.mutation.ClearProjectLog()
	return pu
}

// RemoveProjectLogIDs removes the "project_log" edge to ProjectLog entities by IDs.
func (pu *ProjectUpdate) RemoveProjectLogIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveProjectLogIDs(ids...)
	return pu
}

// RemoveProjectLog removes "project_log" edges to ProjectLog entities.
func (pu *ProjectUpdate) RemoveProjectLog(p ...*ProjectLog) *ProjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProjectLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if _, ok := pu.mutation.CompanyID(); pu.mutation.CompanyCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"company\"")
	}
	if _, ok := pu.mutation.ClubID(); pu.mutation.ClubCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"club\"")
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldName,
		})
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldContent,
		})
	}
	if value, ok := pu.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldStartDate,
		})
	}
	if value, ok := pu.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldEndDate,
		})
	}
	if value, ok := pu.mutation.ApplyingStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldApplyingStartDate,
		})
	}
	if value, ok := pu.mutation.ApplyingEndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldApplyingEndDate,
		})
	}
	if value, ok := pu.mutation.Qualification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldQualification,
		})
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.SponsorFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: project.FieldSponsorFee,
		})
	}
	if value, ok := pu.mutation.AddedSponsorFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: project.FieldSponsorFee,
		})
	}
	if pu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.CompanyTable,
			Columns: []string{project.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.CompanyTable,
			Columns: []string{project.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.ClubTable,
			Columns: []string{project.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.ClubTable,
			Columns: []string{project.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProjectClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectClubTable,
			Columns: []string{project.ProjectClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectclub.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProjectClubIDs(); len(nodes) > 0 && !pu.mutation.ProjectClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectClubTable,
			Columns: []string{project.ProjectClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectclub.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProjectClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectClubTable,
			Columns: []string{project.ProjectClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectclub.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectLogTable,
			Columns: []string{project.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProjectLogIDs(); len(nodes) > 0 && !pu.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectLogTable,
			Columns: []string{project.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProjectLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectLogTable,
			Columns: []string{project.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetContent sets the "content" field.
func (puo *ProjectUpdateOne) SetContent(s string) *ProjectUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetStartDate sets the "start_date" field.
func (puo *ProjectUpdateOne) SetStartDate(s string) *ProjectUpdateOne {
	puo.mutation.SetStartDate(s)
	return puo
}

// SetEndDate sets the "end_date" field.
func (puo *ProjectUpdateOne) SetEndDate(s string) *ProjectUpdateOne {
	puo.mutation.SetEndDate(s)
	return puo
}

// SetApplyingStartDate sets the "applying_start_date" field.
func (puo *ProjectUpdateOne) SetApplyingStartDate(s string) *ProjectUpdateOne {
	puo.mutation.SetApplyingStartDate(s)
	return puo
}

// SetApplyingEndDate sets the "applying_end_date" field.
func (puo *ProjectUpdateOne) SetApplyingEndDate(s string) *ProjectUpdateOne {
	puo.mutation.SetApplyingEndDate(s)
	return puo
}

// SetQualification sets the "qualification" field.
func (puo *ProjectUpdateOne) SetQualification(s string) *ProjectUpdateOne {
	puo.mutation.SetQualification(s)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProjectUpdateOne) SetCreatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableCreatedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetSponsorFee sets the "sponsor_fee" field.
func (puo *ProjectUpdateOne) SetSponsorFee(i int) *ProjectUpdateOne {
	puo.mutation.ResetSponsorFee()
	puo.mutation.SetSponsorFee(i)
	return puo
}

// AddSponsorFee adds i to the "sponsor_fee" field.
func (puo *ProjectUpdateOne) AddSponsorFee(i int) *ProjectUpdateOne {
	puo.mutation.AddSponsorFee(i)
	return puo
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (puo *ProjectUpdateOne) SetCompanyID(id int) *ProjectUpdateOne {
	puo.mutation.SetCompanyID(id)
	return puo
}

// SetCompany sets the "company" edge to the Company entity.
func (puo *ProjectUpdateOne) SetCompany(c *Company) *ProjectUpdateOne {
	return puo.SetCompanyID(c.ID)
}

// SetClubID sets the "club" edge to the Club entity by ID.
func (puo *ProjectUpdateOne) SetClubID(id int) *ProjectUpdateOne {
	puo.mutation.SetClubID(id)
	return puo
}

// SetClub sets the "club" edge to the Club entity.
func (puo *ProjectUpdateOne) SetClub(c *Club) *ProjectUpdateOne {
	return puo.SetClubID(c.ID)
}

// AddProjectClubIDs adds the "project_club" edge to the ProjectClub entity by IDs.
func (puo *ProjectUpdateOne) AddProjectClubIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddProjectClubIDs(ids...)
	return puo
}

// AddProjectClub adds the "project_club" edges to the ProjectClub entity.
func (puo *ProjectUpdateOne) AddProjectClub(p ...*ProjectClub) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProjectClubIDs(ids...)
}

// AddProjectLogIDs adds the "project_log" edge to the ProjectLog entity by IDs.
func (puo *ProjectUpdateOne) AddProjectLogIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddProjectLogIDs(ids...)
	return puo
}

// AddProjectLog adds the "project_log" edges to the ProjectLog entity.
func (puo *ProjectUpdateOne) AddProjectLog(p ...*ProjectLog) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProjectLogIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (puo *ProjectUpdateOne) ClearCompany() *ProjectUpdateOne {
	puo.mutation.ClearCompany()
	return puo
}

// ClearClub clears the "club" edge to the Club entity.
func (puo *ProjectUpdateOne) ClearClub() *ProjectUpdateOne {
	puo.mutation.ClearClub()
	return puo
}

// ClearProjectClub clears all "project_club" edges to the ProjectClub entity.
func (puo *ProjectUpdateOne) ClearProjectClub() *ProjectUpdateOne {
	puo.mutation.ClearProjectClub()
	return puo
}

// RemoveProjectClubIDs removes the "project_club" edge to ProjectClub entities by IDs.
func (puo *ProjectUpdateOne) RemoveProjectClubIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveProjectClubIDs(ids...)
	return puo
}

// RemoveProjectClub removes "project_club" edges to ProjectClub entities.
func (puo *ProjectUpdateOne) RemoveProjectClub(p ...*ProjectClub) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProjectClubIDs(ids...)
}

// ClearProjectLog clears all "project_log" edges to the ProjectLog entity.
func (puo *ProjectUpdateOne) ClearProjectLog() *ProjectUpdateOne {
	puo.mutation.ClearProjectLog()
	return puo
}

// RemoveProjectLogIDs removes the "project_log" edge to ProjectLog entities by IDs.
func (puo *ProjectUpdateOne) RemoveProjectLogIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveProjectLogIDs(ids...)
	return puo
}

// RemoveProjectLog removes "project_log" edges to ProjectLog entities.
func (puo *ProjectUpdateOne) RemoveProjectLog(p ...*ProjectLog) *ProjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProjectLogIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	var (
		err  error
		node *Project
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if _, ok := puo.mutation.CompanyID(); puo.mutation.CompanyCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"company\"")
	}
	if _, ok := puo.mutation.ClubID(); puo.mutation.ClubCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"club\"")
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   project.Table,
			Columns: project.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: project.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Project.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldName,
		})
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldContent,
		})
	}
	if value, ok := puo.mutation.StartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldStartDate,
		})
	}
	if value, ok := puo.mutation.EndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldEndDate,
		})
	}
	if value, ok := puo.mutation.ApplyingStartDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldApplyingStartDate,
		})
	}
	if value, ok := puo.mutation.ApplyingEndDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldApplyingEndDate,
		})
	}
	if value, ok := puo.mutation.Qualification(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: project.FieldQualification,
		})
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: project.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.SponsorFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: project.FieldSponsorFee,
		})
	}
	if value, ok := puo.mutation.AddedSponsorFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: project.FieldSponsorFee,
		})
	}
	if puo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.CompanyTable,
			Columns: []string{project.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.CompanyTable,
			Columns: []string{project.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: company.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.ClubTable,
			Columns: []string{project.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.ClubTable,
			Columns: []string{project.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProjectClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectClubTable,
			Columns: []string{project.ProjectClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectclub.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProjectClubIDs(); len(nodes) > 0 && !puo.mutation.ProjectClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectClubTable,
			Columns: []string{project.ProjectClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectclub.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProjectClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectClubTable,
			Columns: []string{project.ProjectClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectclub.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectLogTable,
			Columns: []string{project.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProjectLogIDs(); len(nodes) > 0 && !puo.mutation.ProjectLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectLogTable,
			Columns: []string{project.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProjectLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ProjectLogTable,
			Columns: []string{project.ProjectLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: projectlog.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
