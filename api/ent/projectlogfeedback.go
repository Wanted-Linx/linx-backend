// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlog"
	"github.com/Wanted-Linx/linx-backend/api/ent/projectlogfeedback"
)

// ProjectLogFeedback is the model entity for the ProjectLogFeedback schema.
type ProjectLogFeedback struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectLogFeedbackQuery when eager-loading is set.
	Edges                            ProjectLogFeedbackEdges `json:"edges"`
	project_log_project_log_feedback *int
}

// ProjectLogFeedbackEdges holds the relations/edges for other nodes in the graph.
type ProjectLogFeedbackEdges struct {
	// ProjectLog holds the value of the project_log edge.
	ProjectLog *ProjectLog `json:"project_log,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectLogOrErr returns the ProjectLog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectLogFeedbackEdges) ProjectLogOrErr() (*ProjectLog, error) {
	if e.loadedTypes[0] {
		if e.ProjectLog == nil {
			// The edge project_log was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: projectlog.Label}
		}
		return e.ProjectLog, nil
	}
	return nil, &NotLoadedError{edge: "project_log"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectLogFeedback) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectlogfeedback.FieldID:
			values[i] = new(sql.NullInt64)
		case projectlogfeedback.FieldAuthor, projectlogfeedback.FieldContent:
			values[i] = new(sql.NullString)
		case projectlogfeedback.ForeignKeys[0]: // project_log_project_log_feedback
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProjectLogFeedback", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectLogFeedback fields.
func (plf *ProjectLogFeedback) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectlogfeedback.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			plf.ID = int(value.Int64)
		case projectlogfeedback.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				plf.Author = value.String
			}
		case projectlogfeedback.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				plf.Content = value.String
			}
		case projectlogfeedback.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_log_project_log_feedback", value)
			} else if value.Valid {
				plf.project_log_project_log_feedback = new(int)
				*plf.project_log_project_log_feedback = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProjectLog queries the "project_log" edge of the ProjectLogFeedback entity.
func (plf *ProjectLogFeedback) QueryProjectLog() *ProjectLogQuery {
	return (&ProjectLogFeedbackClient{config: plf.config}).QueryProjectLog(plf)
}

// Update returns a builder for updating this ProjectLogFeedback.
// Note that you need to call ProjectLogFeedback.Unwrap() before calling this method if this ProjectLogFeedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (plf *ProjectLogFeedback) Update() *ProjectLogFeedbackUpdateOne {
	return (&ProjectLogFeedbackClient{config: plf.config}).UpdateOne(plf)
}

// Unwrap unwraps the ProjectLogFeedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (plf *ProjectLogFeedback) Unwrap() *ProjectLogFeedback {
	tx, ok := plf.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectLogFeedback is not a transactional entity")
	}
	plf.config.driver = tx.drv
	return plf
}

// String implements the fmt.Stringer.
func (plf *ProjectLogFeedback) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectLogFeedback(")
	builder.WriteString(fmt.Sprintf("id=%v", plf.ID))
	builder.WriteString(", author=")
	builder.WriteString(plf.Author)
	builder.WriteString(", content=")
	builder.WriteString(plf.Content)
	builder.WriteByte(')')
	return builder.String()
}

// ProjectLogFeedbacks is a parsable slice of ProjectLogFeedback.
type ProjectLogFeedbacks []*ProjectLogFeedback

func (plf ProjectLogFeedbacks) config(cfg config) {
	for _i := range plf {
		plf[_i].config = cfg
	}
}
